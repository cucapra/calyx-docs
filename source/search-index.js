var searchIndex = JSON.parse('{\
"calyx":{"doc":"The Calyx Intermediate Language","t":[0,14,11,0,0,0,14,0,0,0,14,14,0,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,6,3,4,13,13,13,13,13,13,13,13,13,3,13,13,8,13,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,0,11,11,12,11,11,12,11,12,11,11,12,12,0,11,11,11,13,4,13,13,3,3,13,13,3,4,13,13,13,13,13,3,13,3,4,4,13,13,13,13,13,13,3,13,13,13,4,13,13,13,4,13,3,13,13,13,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,3,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,13,13,13,13,13,13,13,13,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,12,12,13,3,3,3,6,3,3,3,13,4,8,3,13,3,13,13,13,3,4,4,3,13,3,13,13,13,8,8,3,13,13,4,3,3,3,13,13,13,3,13,13,3,13,13,13,13,13,3,13,13,3,13,4,3,3,4,3,13,3,17,6,3,13,13,13,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,12,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,10,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,12,12,12,11,11,12,12,12,11,11,11,11,11,0,11,11,12,12,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,4,13,8,13,8,3,13,13,6,8,8,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,6,3,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5],"n":["analysis","build_assignments","clone_name","default_passes","errors","frontend","guard","ir","pass_manager","passes","register_alias","structure","utils","ControlId","ControlOrder","ControlPorts","DataflowOrder","DominatorMap","GraphAnalysis","GraphColoring","LiveRangeAnalysis","PortInterface","ReadWriteSet","ScheduleConflicts","ShareSet","VariableDetection","add","add_edges","all_conflicts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_greedy","comb_path_spec","comb_path_specs","component_name","compute_unique_ids","conflicts_with","contains","control_port_read_write_set","dataflow_sort","default","default","default","default","default","edge_induced_subgraph","exits_map","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_context","get","get","get_all","get_all_bindings","get_bindings","get_control","get_control_nodes","get_guaranteed_attribute","get_guaranteed_id","get_live_control_data","get_node_reads","get_total_order","has_cycles","has_nodes","insert_conflict","insert_conflicts","into","into","into","into","into","into","into","into","into","into","into","into","into","is_shareable_component","is_state_share","key_written_guaranteed","map","must_write_set","new","new","new","new","paths","port_read_set","port_reads","port_write_set","ports","reaching_defns","read_set","reads_from","register_reads","remove","remove_isolated_vertices","to_owned","to_owned","to_string","to_string","toposort","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uses","variable_like","welsh_powell_coloring","write_set","write_together_specs","writes_to","DefSet","Group","GroupOrInvoke","Invoke","MetadataMap","ReachingDefinitionAnalysis","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_overlap","clone","clone","clone_into","clone_into","cmp","default","default","default","eq","equivalent","fetch_label","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","into","meta","ne","new","partial_cmp","reach","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","AlreadyBound","CalyxResult","Error","ErrorKind","ImpossibleLatencyAnnotation","InvalidFile","MalformedControl","MalformedStructure","Misc","Papercut","ParseError","PassAssumption","ReservedName","Span","Undefined","Unused","WithPos","WriteError","already_bound","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","copy_span","eq","equivalent","fmt","fmt","fmt","format","from","from","from","from","from","from","hash","into","into","into","invalid_file","malformed_control","malformed_structure","misc","ne","new","papercut","parse_error","partial_cmp","pass_assumption","reserved_name","show","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","undefined","unused","with_pos","with_post_msg","write_error","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","2","Workspace","ast","borrow","borrow_mut","components","construct","construct_shallow","declarations","default","externs","from","into","metadata","original_imports","parser","try_from","try_into","type_id","And","Atom","Atom","Binary","BitNum","Cell","Comp","CompOp","ComponentDef","Control","Decimal","Empty","Enable","Eq","Geq","Group","Gt","Guard","GuardComp","GuardExpr","Hex","Hole","If","Invoke","Leq","Lt","NamespaceDef","Neq","Not","Num","NumType","Octal","Or","Par","Port","Port","Proto","Seq","This","While","Wire","attributes","attributes","attributes","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells","components","construct","continuous_assignments","control","dest","expr","externs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","groups","guard","imports","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_comb","is_comb","metadata","name","name","name","name","new","num_type","params","prototype","reference","signature","span","src","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","width","wires","0","0","attributes","attributes","attributes","attributes","attributes","attributes","body","comb_group","comp","comp","cond","cond","fbranch","inputs","outputs","port","port","ref_cells","stmts","stmts","tbranch","0","0","0","0","0","1","1","1","2","component","group","name","port","port","AliasedRule","COMMENT","CalyxParser","EOI","EOI","LHS","LHS","Rule","WHITESPACE","any_char","any_char","args","args","at_attribute","at_attribute","at_attributes","at_attributes","attr_val","attr_val","attribute","attribute","attributes","attributes","bad_num","bad_num","binary","binary","bitwidth","bitwidth","block","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cell","cell","cell_without_semi","cell_without_semi","cells","cells","char","char","clone","clone","clone_into","clone_into","cmp","cmp","cmp_expr","cmp_expr","comb","comb","component","component","connections","connections","control","control","decimal","decimal","enable","enable","eq","eq","equivalent","equivalent","expr","expr","ext","ext","extern_or_component","extern_or_component","externs_and_comps","externs_and_comps","file","file","fmt","fmt","from","from","from","group","group","guard_and","guard_eq","guard_eq","guard_expr","guard_expr","guard_geq","guard_geq","guard_gt","guard_gt","guard_leq","guard_leq","guard_lt","guard_lt","guard_neq","guard_neq","guard_not","guard_not","guard_or","hash","hash","hex","hex","hole","hole","ident_syms","identifier","identifier","if_stmt","if_stmt","import","imports","imports","inputs","inputs","into","into","into","invoke","invoke","invoke_arg","invoke_arg","invoke_args","invoke_args","invoke_ref_arg","invoke_ref_arg","invoke_ref_args","invoke_ref_args","io_port","io_port","metadata","metadata","metadata_char","metadata_char","name_with_attribute","name_with_attribute","num_lit","num_lit","octal","octal","operator","outputs","outputs","par","par","params","params","parse","parse","parse_file","partial_cmp","partial_cmp","port","port","port_with","port_with","primitive","primitive","reference","reference","semi","semi","seq","seq","sig_with_params","sig_with_params","signature","signature","stmt","stmt","stmts_without_block","stmts_without_block","string_lit","string_lit","switch_stmt","switch_stmt","term","term","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","while_stmt","while_stmt","wire","wire","0","1","And","Assignment","Attributes","BackendConf","Binding","Builder","Canonical","Cell","Cell","CellType","CloneName","CombGroup","CompOp","Component","Component","Const","Constant","Context","Control","Direction","Empty","Empty","Enable","Enable","Eq","Geq","GetAttributes","GetName","Group","Group","Gt","Guard","Id","IdList","If","If","Inout","Input","Invoke","Invoke","Leq","LibrarySignatures","Lt","Neq","Not","Or","Output","Par","Par","Param","Port","Port","PortComp","PortDef","PortIterator","PortParent","Primitive","Primitive","Printer","RESERVED_NAMES","RRC","Seq","Seq","ThisComponent","True","WRC","While","While","Width","add","add_attribute","add_comb_group","add_component","add_constant","add_group","add_primitive","add_span","all_ports","and","append","as_ref","assignment_to_str","assignments","assignments","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","bc","bitand","bitand_assign","bitor","bitor_assign","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_assignment","canonical","cell_parent","cells","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_name","cmp","cmp","cmp","comb_group","comb_groups","comp","component","components","cond","cond","constant_name","continuous_assignments","control","control_to_str","copy_span","copy_span","copy_span","copy_span","default","default","default","default","default","deserialize","direction","direction","done_cond","done_cond_mut","drain","dst","empty","empty","enable","enable_verification","entrypoint","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extern_paths","externs","extra_opts","fbranch","find","find","find","find_all_with_attr","find_all_with_attr","find_cell","find_comb_group","find_group","find_primitive","find_with_attr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each_assignment","for_each_port","format_metadata","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ast","ge","generate_name","get","get","get","get_attribute","get_attribute","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_name","get_parameter","get_parent_name","get_primitive","get_signature","get_with_attr","group","groups","gt","guard","guard_str","has","has_attribute","hash","hash","hash","hash","hash","holes","id","if_","index","initialize_inputs","inputs","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","invoke","is_comb","is_comb","is_component","is_constant","is_empty","is_empty","is_hole","is_primitive","is_reference","is_true","iter","iter","iter_mut","le","len","lib","lt","metadata","name","name","name","name","name","name","name","name","name","name","name","ne","ne","neq","new","new","new","new","new","next","not","not_generated","op_str","or","outputs","par","params","parent","partial_cmp","partial_cmp","partial_cmp","port","port","port","port_iter","port_to_str","ports","ports","prototype","ref_cells","remove","resolve","resolve","retain","reverse","rewriter","seq","serialize","signature","signature","signatures","src","stmts","stmts","surface_name","synthesis_mode","tbranch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","traversal","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","update","upgrade","validate","visit","while_","width","width","write_assignment","write_cell","write_comb_group","write_component","write_control","write_extern","write_group","write_primitive","is_comb","name","name","param_binding","val","width","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","2","0","0","value","value","ast_to_ir","CellRewriteMap","CombGroupRewriteMap","PortRewriteMap","Rewriter","borrow","borrow_mut","from","get","get_cell_rewrite","into","new","rewrite_control","rewrite_invoke","try_from","try_into","type_id","Action","Change","ConstructVisitor","Continue","Named","PostOrder","SkipChildren","Stop","VisResult","Visitable","Visitor","apply_update","borrow","borrow","borrow_mut","borrow_mut","change","clear_data","description","do_pass","do_pass","do_pass_default","do_pass_default","empty","empty","enable","enable","finish","finish","finish_if","finish_if","finish_par","finish_par","finish_seq","finish_seq","finish_while","finish_while","from","from","from","get_opts","get_opts","into","into","invoke","invoke","name","new","require_postorder","require_postorder","start","start","start_if","start_if","start_par","start_par","start_seq","start_seq","start_while","start_while","take","traverse_component","traverse_component","try_from","try_from","try_into","try_into","type_id","type_id","visit","0","PassClosure","PassManager","add_alias","borrow","borrow_mut","default","default_passes","execute_plan","from","into","register_pass","show_names","try_from","try_into","type_id","Canonicalize","CellShare","ClkInsertion","CollapseControl","CombProp","CompileEmpty","CompileInvoke","CompileRef","CompileSync","ComponentInliner","ComponentInterface","DeadCellRemoval","DeadGroupRemoval","Externalize","GoInsertion","GroupToInvoke","GroupToSeq","HoleInliner","InferShare","InferStaticTiming","LowerGuards","MergeAssign","MergeStaticPar","Papercut","ParToSeq","RegisterUnsharing","RemoveCombGroups","RemoveIds","ResetInsertion","SimplifyGuards","StaticParConv","SynthesisPapercut","TopDownCompileControl","TopDownStaticTiming","UnrollBounded","WellFormed","WireInliner","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","empty","enable","enable","enable","enable","enable","finish","finish","finish","finish","finish","finish","finish","finish_if","finish_if","finish_if","finish_if","finish_par","finish_par","finish_par","finish_par","finish_par","finish_par","finish_par","finish_seq","finish_seq","finish_while","finish_while","finish_while","finish_while","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke","invoke","invoke","invoke","invoke","invoke","invoke","invoke","invoke","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","require_postorder","require_postorder","require_postorder","require_postorder","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start_if","start_if","start_if","start_if","start_par","start_seq","start_while","start_while","start_while","start_while","start_while","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BoolIdx","File","Idx","NameGenerator","OutputFile","Stdout","WeightGraph","add_all_edges","add_edge","add_names","add_node","as_path_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contains_node","default","default","degree","fmt","fmt","from","from","from","from","from","from","from_str","gen_name","get_write","graph","index_map","into","into","into","into","is_zero","isatty","math","nodes","reverse_index","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_prev_defined_names","zero","0","bits_needed_for"],"q":["calyx","","","","","","","","","","","","","calyx::analysis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx::analysis::reaching_defns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx::analysis::reaching_defns::GroupOrInvoke","","calyx::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx::errors::ErrorKind","","","","","","","","","","","","","","","","","","","calyx::frontend","","","","","","","","","","","","","","","","","","calyx::frontend::astcalyx::frontend::ast::Atom","","calyx::frontend::ast::Control","","","","","","","","","","","","","","","","","","","","","calyx::frontend::ast::GuardExpr","","","","","","","","","calyx::frontend::ast::Port","","","","","calyx::frontend::parsercalyx::ircalyx::ir::CellType","","","","","","calyx::ir::Control","","","","","","","calyx::ir::Guard","","","","","","","","","calyx::ir::PortParent","","calyx::ir::Width","","calyx::ir::from_ast","calyx::ir::rewriter","","","","","","","","","","","","","","","","calyx::ir::traversal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx::ir::traversal::Action","calyx::pass_manager","","","","","","","","","","","","","","","calyx::passescalyx::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx::utils::OutputFile","calyx::utils::math"],"d":["Analysis for Calyx programs.","Build guarded assignment statements and return a vector …","","Defines the default passes available to PassManager.","Errors generated by the compiler.","Frontend parsing and AST representation.","Convinience macro to get a port and turn it into an …","Internal representation for the Calyx compiler.","Define the PassManager structure that is used to construct …","Passes for the Calyx compiler.","Simple macro to register an alias with a pass manager.","Add primitives and constants to the component and <code>let</code>-bind …","Shared utilities.","Adding “NODE_ID”, “BEGIN_ID”, and “END_ID” …","Extract the dependency order of a list of control programs.","Contains a mapping from name of ir::CombGroup to the ports …","Given a set of assignment, generates an ordering that …","Builds a Domination Map for the control program. It maps …","Constructs a graph based representation of a component. …","Defines a greedy graph coloring algorithm over a generic …","This analysis implements a parallel version of a classic …","Helper methods to parse <code>@read_together</code> and <code>@write_together</code> …","Calcuate the reads-from and writes-to set for a given set …","A conflict graph that describes which nodes (i.e. …","Stores a Hashset that contains the type names of all …","Detects if a group is solely being used to update a …","Adds id to self","Add each edge in <code>edges</code> to the graph.","Returns an iterator containing all conflict edges, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given an <code>ordering</code> of <code>T</code>s, find a mapping from nodes to <code>T</code>s …","Construct <code>@read_together</code> spec from the definition of a …","Construct @read_together specs from the primitive …","","Adds the @NODE_ID attribute to all control stmts except …","Return a vector of all nodes that conflict with this nodes.","Checks if id contains self","Returns the ports that are read by the given control …","","","","","","","Restricts the analysis graph to only include edges that …","Maps ids of control stmts, to the “last” nodes in …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a shareset from the context. Looks for “…","Return a reference to the port reads associated with the …","Look up the set of things live at a node (i.e. group or …","Get a unique list of all live cells in <code>component</code>.","Return the entire invoke binding map.","Get all bindings for an instance","Given a control c and an id, finds the control statement …","","","","Updates live_once_map and par_thread_map. live_once_map …","","Return a total order for the control programs. Returns an …","Checks if there are cycles in the analysis graph.","","Add a conflict edge between <code>a</code> and <code>b</code>.","Add conflict edges between all given items.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Given a set of shareable and a cell, determines whether …","Returns whether or not this instance is state_share","","Map from group names to the name of groups that dominate it","Return the name of the cells that these assignments write …","","Construct a domination map.","Construct a live range analysis.","","Return a Vec of paths from <code>start</code> to <code>finish</code>, each path a …","Returns ir::Port which are read from in the assignments.","Returns ir::Port that are read from in the given …","Returns ir::Port which are written to in the assignments.","Returns all the <code>Port</code> associated with this instance.","Calculate the reaching definitions in a control program.","Returns ir::Cell which are read from in the assignments. …","Returns an iterator over all the reads from a port. …","Returns the register cells whose out port is read anywhere …","Remove the port reads associated with the group.","Remove all vertices that have no undirected neighbors from …","","","","","Return a topological sort of this graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns all uses of cells in this group. Uses constitute …","A group is variable like if it:","","Returns ir::Cell which are written to by the assignments. …","Construct @write_together specs from the primitive …","Returns an iterator over all the writes to this port. …","A datastructure used to represent a set of …","","A wrapper enum to distinguish between Ids that come from …","","","A struct used to compute a reaching definition analysis. …","","","","","","","","","Provides a map containing a vector of sets for each …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs a reaching definition analysis for registers …","","","","","","","","","","","","","","","","","","","The name has already been bound.","Convience wrapper to represent success or meaningul …","","Standard error type for Calyx errors.","Group “static” latency annotation differed from …","The input file is invalid (does not exist).","The control program is malformed.","The connections are malformed.","Miscellaneous error message","Papercut error: signals a commonly made mistake in Calyx …","Error while parsing a Calyx program.","Requirement of a pass was not satisfied","Using a reserved keyword as a program identifier.","A span of the input program. Used for reporting …","The name has not been bound","The group was not used in the program.","An IR node that may contain position information.","Failed to write the output","","","","","","","","","","","Copy the span associated with this node.","","","","","","Format this Span with a the error message <code>err_msg</code>","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a new <code>Error::Span</code> from a <code>pest::Span</code> and the input …","","","","","","Visualizes the span without any message or mkaring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Workspace represents all Calyx files transitively …","Abstract Syntax Tree for Calyx","","","List of component definitions that need to be compiled.","Construct a new workspace from an input stream …","Construct the Workspace using the given NamespaceDef and …","List of component definitions that should be used as …","","Absolute path to extern definitions and primitives defined …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Optional opaque metadata attached to the top-level file","Original import statements present in the top-level file.","Parser for Calyx programs.","","","","","Atomic operations used in guard conditions and RHS of the …","","","Custom bitwidth numbers","The Cell AST nodes.","Refers to the port named <code>port</code> on the subcomponent <code>component</code>…","","AST statement for defining components.","Control AST nodes.","","Control statement that does nothing.","Runs the control for a list of subcomponents.","","","","","Guards <code>expr</code> using the optional guard condition <code>guard</code>.","Possible comparison operators for guards.","The AST for GuardExprs","","<code>group[name]</code> parses into <code>Hole { group, name }</code> and is a hole …","Standard imperative if statement","Invoke component with input/output assignments.","","","Corresponds to an individual Calyx file.","","","A constant.","","","","Represents parallel composition of control statements.","Statement that refers to a port on a subcomponent. This is …","Accessing a particular port on a component.","Prototype of the cell definition","Represents sequential composition of control statements.","Refers to the port named <code>port</code> on the component currently …","Standard imperative while statement","Data for the <code>-&gt;</code> structure statement.","Attributes attached to this component","Attributes attached to this cell definition","","Attributes for this assignment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of instantiated sub-components","List of component definitions.","","List of continuous assignments","Single control statement for this component.","Guarded destinations of the wire.","","Extern statements and any primitive declarations in them.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a primitive cell instantiation.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","List of groups","","Path to extern files.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True iff this is a combinational component","","Optional opaque metadata","Name of the component.","Name of the primitive.","Name of the cell.","","","","Parameter binding for primitives","Name of the prototype this cell was built from.","Whether this cell is external","Defines input and output ports along with their attributes.","","Source of the wire.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Control for the loop body.","Combinational group that may execute with this invoke.","Group to be enabled","Name of the component to be invoked.","Modules that need to be enabled to send signal on <code>port</code>.","Modules that need to be enabled to send signal on <code>port</code>.","Control for the true branch.","Input assignments","Output assignments","Port that connects the conditional check.","Port that connects the conditional check.","External cells that may execute with this invoke.","List of <code>Control</code> statements to run in sequence.","List of <code>Control</code> statements to run in sequence.","Control for the true branch.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a Calyx program into an AST representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents <code>c1 &amp;&amp; c2</code>.","Represents a guarded assignment in the program","Attributes associated with a specific IR structure.","Configuration information for the backends.","Alias for bindings","IR builder. Uses internal references to the component to …","Canonical name of a Port","Represents an instantiated cell.","","The type for a Cell","A utility trait representing the ability to clone the name …","A combinational group. A combinational group does not have …","Comparison operator.","In memory representation of a Component.","Cell constructed using a Calyx component","The width is a constant.","Cell representing a Constant","The IR Context that represents an entire Calyx program …","Control AST nodes.","Direction of a port on a cell.","Data for the <code>empty</code> control statement.","Control statement that does nothing.","Data for the <code>enable</code> control statement.","Runs the control for a list of subcomponents.","p1 == p2","p1 &gt;= p2","Structs that can return an <code>Attributes</code> instance.","A trait representing something in the IR that has a name.","A Group of assignments that perform a logical action.","","p1 &gt; p2","An assignment guard which has pointers to the various …","Represents an identifier in a Calyx program","A wrapper struct exposing an ordered collection of named …","Data for the <code>if</code> control statement.","Standard imperative if statement","Input-Output “port”. Should only be used by holes.","Input port.","Data for an <code>invoke</code> control statement.","Invoke a sub-component with the given port assignments","p1 &lt;= p2","A representation of all the primitive definitions found …","p1 &lt; p2","p1 != p2","Represents <code>!c1</code>","Represents <code>c1 || c2</code>.","Output port.","Data for the <code>par</code> control statement.","Represents parallel composition of control statements.","The width is a parameter.","Represents a port on a cell.","Uses the value on a port as the condition. Same as …","Comparison operations that can be performed between ports …","Definition of a port parameterized by a width type. Ports …","Wraps generic iterators over ports to allow functions to …","Ports can come from Cells or Groups","Representation of a external primitive definition.","Cell constructed using a primitive definition","Printer for the IR.","","Alias for a RefCell contained in an Rc reference.","Data for the <code>seq</code> control statement.","Represents sequential composition of control statements.","This cell represents the current component","The constant true","A Wrapper for a weak RefCell pointer. Used by parent …","Data for the <code>if</code> control statement.","Standard imperative while statement","Represents an abstract width of a primitive signature.","Add a new element to the colleciton","Add a new attribute to the group.","Construct a combinational group","Add a component instance to this component using its name …","Return reference for a constant cell associated with the …","Construct a new group and add it to the Component. The …","Consturcts a primitive cell of type <code>primitive</code>. The name of …","Set the span information","Returns all the ports used by this guard.","","Add all elements to the collection","","Convinience method to get string representation of …","The assignments used in this group","The assignments used in this group","Attributes for this component","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Key-value attributes for this primitive.","Attributes attached to this port definition","Attributes associated with this port.","Attributes for this group.","Attributes for this assignment.","Attributes for this group.","Attributes for this group.","Configuration flags for backends.","","","","","Control for the loop body.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct an assignment.","Get the canonical representation for this Port.","Returns the parent of the Port which must be Cell. Throws …","The cells instantiated for this component.","Removes all elements from the collection","","","Associated clone method the control program. We don’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a clone of the object’s name","","","","Optional combinational group that is active when the …","Groups of assignment wires.","Cell that is being invoked.","Component for which this builder is constructing.","The components for this program.","Optional combinational group attached using <code>with</code>.","Group that makes the signal on the conditional port valid.","Return the canonical name for the cell generated to …","The set of “continuous assignments”, i.e., assignments …","The control program for this component.","Convinience method to get string representation of …","","","","","","","","","","","The direction of the port. Only allowed to be …","Direction of the port","Returns a reference to the assignment in the group that …","Returns a mutable reference to the assignment in the group …","Removes all elements from the collection and returns an …","The destination for the assignment.","Returns an empty iterator over ports.","Convience constructor for empty.","Convience constructor for enable.","Enables verification checks.","Entrypoint for the program","","","","","","","","","","","","","","","","","Return the paths for the extern defining files","Return the underlying externs","Extra options provided to the command line. Interpreted by …","Control for the false branch.","Returns the element indicated by the name, if present, …","Get a reference to the named port if it exists.","Get a reference to the named hole if it exists.","Return all ports that have the attribute <code>attr</code>.","Return all ports that have the attribute <code>attr</code>.","Return a reference to the cell with <code>name</code> if present.","Return a refernece to a combination group with <code>name</code> if …","Return a reference to the group with <code>name</code> if present.","Return the Primitive associated with the given name if …","Get a reference to the first port that has the attribute …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutates a guard by calling <code>f</code> on every leaf in the guard …","Apply function on all assignments contained within the …","Apply function <code>f</code> to each port contained within the …","Formats the top-level metadata if present","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Module to transform AST programs into IR.","","Construct a non-conflicting name using the Component’s …","Get the value associated with an attribute key","Get a reference to the named port and throw an error if it …","Get a reference to the named hole or panic.","Returns the value of an attribute if present","Return the value associated with this attribute key.","Returns an <code>Attributes</code> instance","","","The attributes of this group.","The attributes of this group.","Returns a mutable <code>Attributes</code> instance","","","Return the name associated with this CellType is present","Get parameter binding from the prototype used to build …","Gets name of parent object.","Return the Primitive associated to this Id.","","Get a reference to the first port with the attribute <code>attr</code> …","List of components to run.","Groups of assignment wires.","","The guard for this assignment.","Generate a String-based representation for a guard.","Check if an attribute key has been set","Returns true if the node has a specific attribute","","","","","","Holes for this group","","Convience constructor for if","","Generate initial assignments for input ports","Mapping from name of input ports in <code>comp</code> to the port …","Add a new attribute","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Convience constructor for invoke.","True iff component is combinational","True iff this is a combinational primitive","Returns true iff this cell is an instance of a …","Checks if this port is a constant of value: <code>val</code>.","Returns true if there are no attributes","Returns true if there are no elements in the list.","Checks if this port is a hole","Returns true if this is an instance of a primitive. If the …","Get a boolean describing whether the cell is external.","Returns true if this is a <code>Guard::True</code>.","Iterate over all attributes","Returns an iterator over immutable references","Returns an iterator over mutable references. Likely a …","","","Library definitions imported by the program.","","An optional opaque metadata string which is used by Cider","Return a reference to the object’s name","","Grants immutable access to the name of this cell.","The name of this group.","","","The name of this group.","Name of the component.","Name of this primitive.","The name of the port.","Name of the port","","","","Instantiate a new builder using for a component.","Construct a new Component with the given <code>name</code> and …","","Construct a cell","","","","Disable the generated flag on the builder","Return the string corresponding to the guard operation.","","Mapping from name of output ports in <code>comp</code> to the port …","Convience constructor for par.","Paramters for this primitive.","Weak pointer to this port’s parent","","","","","Port that connects the conditional check.","Port that connects the conditional check.","","Get the port access expression.","Returns a reference to all super::Port attached to this …","Ports on this cell","Underlying type for this cell","Mapping from name of external cell in ‘comp’ to the …","Remove attribute with the name <code>key</code>","Retuns the bindings for all the paramters, the input ports …","Given a map from names of parameters to their values, …","Keep only the elements in the collection which satisfy the …","Return the direction opposite to the current direction","","Convience constructor for seq.","","The input/output signature of this component.","The input/output signature for this primitive.","Return an iterator over all defined primitives.","The source for the assignment.","List of <code>Control</code> statements to run in sequence.","List of <code>Control</code> statements to run in parallel.","Generate string representation of CellType appropriate for …","Enables synthesis mode.","Control for the true branch.","","","","","","","","","","","","","","","","","Visitor to traverse a control program.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the name of the component that is this cells type.","Update the guard in place. Replaces this guard with …","Convinience method to upgrade and extract the underlying …","Enable the validation flag on a builder.","","Convience constructor for while","The width of the port. .","Width of the port","Format and write an assignment.","Format and write a cell.","Format and write a combinational group.","Formats and writes the Component to the formatter.","Format and write a control program","Formats and writes extern statements.","Format and write a group.","","True iff this is a combinational primitive","Name of the primitive cell used to instantiate this cell.","Name of the component used to instantiate this cell.","Bindings for the parameters. Uses Vec to retain the input …","Value of this constant","Width of this constant","","","","","","","","","","","","","","","","","","","","","Construct an IR representation using a parsed AST and …","Map to rewrite cell uses. Maps name of the old cell to the …","Map name of old combination group to new combinational …","Map to rewrite port uses. Maps the canonical name of an …","A structure to track rewrite maps for ports. Stores both …","","","Returns the argument unchanged.","Get any port rewrite defined for the given port.","Return the rewrite for a cell","Calls <code>U::from(self)</code>.","","Given a control program, rewrite all uses of cells, …","Rewrite a <code>invoke</code> node using a CellRewriteMap and a …","","","","Action performed at the end of visiting a control …","Replace the the current ast node with a new node. If …","Trait defining method that can be used to construct a …","Continue traversal of control program.","Trait that describes named things. Calling <code>do_pass</code> and …","Enable post-order traversal of components. If a component <code>B</code>…","Skips the traversal of this node’s children but …","Globally abort traversal of control program.","Result of performing a visit.","Describes types that can be visited by things implementing …","The visiting interface for a <code>ir::Control</code> program. Contains …","Traverses components in post-order and applies <code>upd</code>.","","","","","","Clear the data stored in the visitor. Called before …","A short description of the pass.","Run the visitor on a given program <code>ir::Context</code>. The …","Run the visitor on a given program <code>ir::Context</code>. The …","Build a Default implementation of this pass and call …","Build a Default implementation of this pass and call …","Executed at an ir::Empty node.","Executed at an ir::Empty node.","Executed at an ir::Enable node.","Executed at an ir::Enable node.","Executed after the traversal ends. This method is always …","Executed after the traversal ends. This method is always …","Executed after visiting the children of a ir::If node.","Executed after visiting the children of a ir::If node.","Executed after visiting the children of a ir::Par node.","Executed after visiting the children of a ir::Par node.","Executed after visiting the children of a ir::Seq node.","Executed after visiting the children of a ir::Seq node.","Executed after visiting the children of a ir::While node.","Executed after visiting the children of a ir::While node.","Construct the visitor using information from the Context","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Executed at an ir::Invoke node.","Executed at an ir::Invoke node.","The name of a pass. Is used for identifying passes.","Returns a new instance the PostOrder iterator given a …","Returns true if this pass requires a post-order traversal …","Returns true if this pass requires a post-order traversal …","Executed before the traversal begins.","Executed before the traversal begins.","Executed before visiting the children of a ir::If node.","Executed before visiting the children of a ir::If node.","Executed before visiting the children of a ir::Par node.","Executed before visiting the children of a ir::Par node.","Executed before visiting the children of a ir::Seq node.","Executed before visiting the children of a ir::Seq node.","Executed before visiting the children of a ir::While node.","Executed before visiting the children of a ir::While node.","Returns the underlying component vector in original order.","Define the traversal over a component. Calls Visitor::start…","Define the traversal over a component. Calls Visitor::start…","","","","","","","Perform the traversal.","","Top-level type for all passes that transform an ir::Context","Structure that tracks all registered passes for the …","Adds a new alias for groups of passes. An alias is a list …","","","","","Executes a given “plan” constructed using the incl and …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Register a new Calyx pass and return an error if another …","Return a string representation to show all available …","","","","Perform serval canonicalizations on the program.","Given a LiveRangeAnalysis that specifies the “share” …","Adds assignments from a components <code>clk</code> port to every …","Collapses and de-nests control constructs.","Propagate unconditional reads and writes from wires.","Compiles away all <code>ir::Empty</code> statements into an <code>ir::Enable</code>.","Compiles <code>ir::Invoke</code> statements into an <code>ir::Enable</code> that …","Remove all the cells marked with the ‘ref’ keyword…","loop through all control statements under “par” block …","Inlines all sub-components marked with the <code>@inline</code> …","Wires up the <code>go</code> and <code>done</code> holes for Calyx programs with a …","Removes unused cells from components.","Removes unused groups and combinational groups from …","Externalize input/output ports for cells marked with the …","Add the group’s <code>go</code> signal into the guards of all …","Transform groups that are structurally invoking components …","Transforms a group into a seq of 2 smaller groups, if …","Removes all groups and inlines reads and writes from holes.","This pass checks if components are (state) shareable. Here …","Infer “static” annotation for groups and add “@static…","Lowers guards into a purely structural representation. …","Merge assignments of the form with the same (dst_port, …","under a par control block, if multiple groups have the …","Pass to check for common errors such as missing …","Transforms all <code>par</code> into <code>seq</code>. Uses analysis::ControlOrder …","Unsharing registers reduces the amount of multiplexers …","Transforms combinational groups, which have a constant …","Removes NODE_ID, BEGIN_ID, and END_ID from each control …","Adds assignments from a components <code>reset</code> port to every …","Simplify guards using BDDs and other heuristic tricks. <em>Not </em>…","Transforms a par of seq blocks into a seq of par blocks. …","Pass to check common synthesis issues.","<strong>Core lowering pass.</strong> Compiles away the control programs in …","Lowering pass that generates latency-sensitive FSMs when …","Fully unroll all <code>while</code> loops with a given <code>@bound</code>.","Pass to check if the program is well-formed.","Alternate hole inliner that removes groups and group holes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transforms a <code>if-with</code> into a <code>seq-if</code> which first runs the …","","Compile each child in <code>par</code> block separately so each child …","Collapse par { par { A }; B } into par { A; B }.","","","Collapse par { par { A }; B } into par { A; B }.","","","Collapse seq { seq { A }; B } into seq { A; B }.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codedge weight used for the graph nodes","","","Simple HashMap-based name generator that generates new …","Possible choices for output streams. Used by the <code>-o</code> option …","","Weight graph provides a wrapper over a Graph that allows …","Add edges between all given items.","Add an edge between <code>a</code> and <code>b</code>.","Add generated names","Add a new node to the graph. Client code should ensure …","","","","","","","","","","","","Checks if the node has already been added to the graph.","","","Return the degree of a given node (number of edges …","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a new String that starts with <code>prefix</code>. For example:","","Graph representating using identifier.","Mapping from T to a unique identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over references to nodes in the Graph.","Returns a Map from <code>NodeIndex</code> to <code>T</code> (the reverse of the …","","","","","","","","","","","","","","","","Create a NameGenerator where <code>names</code> are already defined so …","","",""],"i":[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,9,10,11,12,13,3,14,4,2,5,6,7,8,9,10,11,12,13,3,14,4,2,3,2,3,2,9,10,10,13,5,4,2,11,8,13,3,14,4,2,3,13,13,3,14,5,6,7,7,8,9,9,10,11,12,13,3,3,3,14,4,4,2,2,7,14,14,7,7,13,13,5,5,14,13,6,3,9,9,9,5,6,7,8,9,10,11,12,13,3,14,4,2,2,2,13,13,11,8,13,14,2,3,11,11,11,3,0,11,3,11,7,3,3,2,9,3,3,5,6,7,8,9,10,11,12,13,3,14,4,2,5,6,7,8,9,10,11,12,13,3,14,4,2,5,6,7,8,9,10,11,12,13,3,14,4,2,11,12,9,11,10,3,0,15,0,15,0,0,15,16,17,18,15,16,17,18,18,15,17,15,17,15,16,17,18,15,15,16,15,16,17,18,15,16,17,18,15,15,15,16,17,18,18,15,18,15,18,15,17,15,16,17,18,15,16,17,18,15,16,17,18,19,20,21,0,0,0,21,21,21,21,21,21,21,21,21,0,21,21,0,21,22,22,21,23,22,21,23,23,23,23,24,23,23,22,21,23,23,22,22,22,22,21,23,23,22,21,23,22,22,22,22,23,23,22,22,23,22,22,23,23,21,22,21,23,22,21,23,22,21,23,22,22,22,22,22,25,26,27,28,29,30,31,32,33,34,35,36,37,29,30,31,32,34,34,0,0,38,38,38,38,38,38,38,38,38,38,38,38,0,38,38,38,39,0,39,40,0,0,41,39,0,0,40,42,42,43,43,0,43,0,0,0,40,41,42,42,43,43,0,43,39,44,0,40,39,42,0,44,0,42,41,42,0,45,46,47,48,49,45,41,40,50,44,39,43,51,52,46,47,48,42,49,45,41,40,50,44,39,43,51,52,46,47,48,42,45,49,49,45,45,48,51,49,49,45,41,40,50,44,39,43,51,52,46,47,48,42,49,45,41,40,50,44,39,43,51,52,46,46,47,48,42,45,51,49,49,45,41,40,50,44,39,43,51,52,46,47,48,42,45,47,49,45,52,46,47,45,50,52,46,46,45,50,48,49,45,41,40,50,44,39,43,51,52,46,47,48,42,49,45,41,40,50,44,39,43,51,52,46,47,48,42,49,45,41,40,50,44,39,43,51,52,46,47,48,42,50,50,47,53,54,55,56,57,58,59,60,58,60,59,60,57,58,57,60,60,57,58,60,55,56,57,61,62,63,64,65,61,62,64,64,66,67,67,66,68,0,69,0,69,70,69,70,0,69,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,71,70,69,71,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,71,70,69,70,69,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,69,70,69,70,69,70,69,69,70,69,70,69,69,70,69,70,69,71,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,69,70,69,70,69,70,71,71,71,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,71,70,69,71,70,69,71,70,69,70,69,70,72,72,73,0,0,0,0,0,0,0,74,0,0,0,73,0,75,76,75,0,0,0,0,77,0,77,78,78,0,0,0,74,78,0,0,0,0,77,79,79,0,77,78,0,78,78,73,73,79,0,77,76,0,73,0,0,0,0,0,75,0,0,0,0,77,75,73,0,0,77,0,80,81,82,82,82,82,82,83,73,73,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,81,98,86,87,99,73,73,73,73,92,82,99,85,100,83,101,88,80,102,103,89,90,91,92,93,94,104,77,78,73,84,95,96,76,79,74,97,72,75,81,98,86,87,82,99,85,100,83,101,88,80,102,103,89,90,91,92,93,94,104,77,78,73,84,95,96,76,79,74,97,72,75,81,98,86,87,82,97,97,88,80,83,101,77,78,73,84,95,96,76,79,74,97,72,75,98,83,101,78,73,84,95,96,76,79,74,97,72,75,98,105,73,84,72,94,88,94,82,99,91,92,81,88,88,85,83,77,84,81,83,80,102,103,73,84,96,97,86,86,80,98,100,77,77,103,99,78,73,73,84,84,79,97,72,75,78,73,84,79,97,72,75,102,102,99,91,80,81,86,95,81,88,88,88,102,81,83,101,88,80,102,89,90,91,92,93,94,104,77,78,73,84,84,95,96,76,76,79,74,97,72,75,81,98,86,87,73,88,98,85,82,99,85,100,83,101,101,88,80,80,102,102,103,89,90,91,92,93,94,104,77,78,73,73,73,84,84,84,95,96,96,96,76,79,74,97,72,75,81,98,86,87,0,73,88,83,81,86,77,81,106,77,81,86,87,106,77,81,75,81,97,102,81,81,93,88,73,98,85,83,77,73,84,79,72,75,86,84,77,83,103,94,83,82,99,85,100,83,101,88,80,102,103,89,90,91,92,93,94,104,77,78,73,84,95,96,76,79,74,97,72,75,81,98,86,87,100,77,88,95,81,97,83,80,97,81,81,73,83,80,80,73,80,99,73,99,107,81,81,86,86,87,87,88,95,96,97,72,75,73,82,88,84,81,86,100,73,82,73,73,94,77,95,97,73,84,72,73,91,92,100,85,81,81,81,94,83,95,96,80,79,0,77,84,88,95,102,98,89,90,75,103,91,83,101,78,73,84,95,96,76,79,74,97,72,75,98,84,76,0,82,99,85,100,83,83,101,88,80,102,103,89,90,91,92,93,94,104,77,78,73,84,95,96,76,79,74,97,72,75,81,98,86,87,82,99,85,100,83,101,88,80,102,103,89,90,91,92,93,94,104,77,78,73,84,95,96,76,79,74,97,72,75,81,98,86,87,82,99,85,100,83,101,88,80,102,103,89,90,91,92,93,94,104,77,78,73,84,95,96,76,79,74,97,72,75,81,98,86,87,81,73,101,82,77,77,96,97,85,85,85,85,85,85,85,85,108,108,109,108,110,110,111,112,113,114,115,116,117,118,119,120,121,122,118,119,121,121,123,124,125,126,0,0,0,0,0,127,127,127,127,127,127,127,127,127,127,127,127,0,128,0,128,0,0,128,128,0,0,0,129,128,129,128,129,128,130,131,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,130,128,129,130,130,128,129,132,132,131,129,132,132,132,132,132,132,132,132,132,132,132,132,129,132,132,128,129,128,129,128,129,133,134,0,0,135,135,135,135,135,135,135,135,135,135,135,135,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,136,137,138,139,140,141,142,143,144,145,147,148,149,146,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,152,142,144,149,157,159,144,147,149,152,156,157,166,144,149,157,166,144,147,151,154,163,164,170,144,151,144,149,157,166,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,147,147,148,148,149,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,139,140,144,149,153,156,157,165,166,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,139,140,143,144,136,137,138,139,140,141,142,143,144,145,146,147,149,150,155,158,159,160,161,162,165,166,167,168,169,172,140,145,148,156,148,148,140,145,148,156,171,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,0,173,0,0,0,173,0,174,174,175,174,173,176,174,175,173,176,174,175,173,175,175,174,174,173,174,175,173,176,176,174,174,175,173,173,175,173,174,174,176,174,175,173,176,173,0,174,174,175,174,173,176,174,175,173,176,174,175,173,176,174,175,173,175,176,177,0],"f":[null,null,[[["",0]],["id",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["id",3]]],[[]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["graphanalysis",3]],[[["",0]],["shareset",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["option",4,[["u64",0]]]],["hashmap",3]],[[["primitive",3]],["calyxresult",6,[["vec",3]]]],[[],["calyxresult",6,[["hashmap",3,[["id",3],["vec",3]]]]]],null,[[["control",4],["u64",0],["bool",0]],["u64",0]],[[["",0],["id",3]],["hashset",3,[["id",3]]]],[[["",0],["id",3]],["bool",0]],[[["control",4]]],[[["",0],["vec",3,[["assignment",3]]]],["calyxresult",6,[["vec",3,[["assignment",3]]]]]],[[],["dominatormap",3]],[[],["graphanalysis",3]],[[],["liverangeanalysis",3]],[[],["scheduleconflicts",3]],[[],["shareset",3]],[[]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["control",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["group",3]]],[[]],[[["component",3]]],[[]],[[["control",4]]],[[]],[[]],[[["context",3]]],[[["",0],["id",3]],["option",4,[["vec",3]]]],[[["",0],["u64",0]],["hashmap",3]],[[["",0]]],[[],["hashmap",3,[["id",3],["vec",3,[["vec",3]]]]]],[[["",0],["id",3]],["option",4,[["vec",3]]]],[[["u64",0],["control",4]],["option",4,[["control",4]]]],[[["hashset",3],["control",4]],["vec",3,[["control",4]]]],[[["control",4],["str",0]],["u64",0]],[[["control",4]],["u64",0]],[[["",0],["hashmap",3],["hashmap",3],["hashmap",3],["hashset",3],["control",4]]],[[["u64",0],["component",3],["shareset",3]],["hashset",3,[["id",3]]]],[[],["calyxresult",6,[["vec",3,[["control",4]]]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0],["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["rrc",6]],["bool",0]],[[["",0]],["bool",0]],[[["id",3],["hashset",3],["component",3]],["bool",0]],null,[[]],[[],["calyxresult",6]],[[["control",4],["string",3]]],[[["control",4],["shareset",3],["shareset",3]]],[[["hashset",3,[["id",3]]],["bool",0]]],[[["",0],["port",3],["port",3]],["vec",3,[["vec",3,[["rrc",6,[["port",3]]]]]]]],[[]],[[["assignment",3]]],[[]],[[["",0]],["vec",3,[["rrc",6,[["port",3]]]]]],null,[[]],[[["",0],["port",3]],["portiterator",3]],[[]],[[["",0],["id",3]],["option",4,[["vec",3,[["rrc",6,[["port",3]]]]]]]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["portiterator",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[["rrc",6],["shareset",3]],["option",4]],[[["",0]],["hashmap",3]],[[]],[[],["hashmap",3,[["id",3],["vec",3,[["hashset",3,[["id",3]]]]]]]],[[["",0],["port",3]],["portiterator",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["btreemap",3,[["id",3],["vec",3,[["btreeset",3]]]]]],[[["",0]],["grouporinvoke",4]],[[["",0]],["defset",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],[[],["metadatamap",3]],[[],["defset",3]],[[],["reachingdefinitionanalysis",3]],[[["",0],["grouporinvoke",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["invoke",3]],["option",4,[["id",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],[[]],[[],["id",3]],[[]],[[]],[[]],null,[[["",0],["grouporinvoke",4]],["bool",0]],[[["control",4]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["id",3],["string",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["span",3]],[[["",0],["",0]]],[[["",0],["span",3]],["ordering",4]],[[["",0]],["option",4,[["span",3]]]],[[["",0],["span",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["str",0]],["string",3]],[[["utf8error",3]]],[[["error",3,[["rule",4]]]]],[[]],[[["error",3]]],[[]],[[]],[[["",0],["",0]]],[[]],[[]],[[]],[[["string",3]]],[[["string",3]]],[[["tostring",8]]],[[["string",3]]],[[["",0],["span",3]],["bool",0]],[[["span",3],["rc",3,[["str",0]]],["rc",3,[["str",0]]]],["span",3]],[[["string",3]]],[[["error",3,[["rule",4]]]]],[[["",0],["span",3]],["option",4,[["ordering",4]]]],[[["tostring",8],["string",3]]],[[["id",3]]],[[["",0]],["string",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["id",3],["string",3]]],[[["id",3],["tostring",8]]],[[["",0]]],[[["option",4,[["string",3]]]]],[[["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["option",4],["path",3]],["calyxresult",6]],[[["option",4],["path",3]],["calyxresult",6]],null,[[],["workspace",3]],null,[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,[[["option",4]],["calyxresult",6]],null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["id",3],["id",3],["vec",3,[["u64",0]]],["attributes",3],["bool",0]],["cell",3]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["bool",0],["vec",3,[["portdef",3,[["u64",0]]]]]]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,null,[[["",0]],["rule",4]],[[["",0]],["aliasedrule",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["rule",4]],["ordering",4]],[[["",0],["aliasedrule",4]],["ordering",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["rule",4]],["bool",0]],[[["",0],["aliasedrule",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,null,null,null,null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["rule",4],["str",0]],["result",4,[["pairs",3,[["rule",4]]],["error",3,[["rule",4]]]]]],[[["read",8]],["calyxresult",6,[["namespacedef",3]]]],[[["path",3]],["calyxresult",6,[["namespacedef",3]]]],[[["",0],["rule",4]],["option",4,[["ordering",4]]]],[[["",0],["aliasedrule",4]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["rrc",6]]],[[["",0],["u64",0]]],[[["",0]],["rrc",6,[["combgroup",3]]]],[[["",0],["vec",3,[["portdef",3,[["u64",0]]]]]],["rrc",6,[["cell",3]]]],[[["",0],["u64",0],["u64",0]],["rrc",6,[["cell",3]]]],[[["",0]],["rrc",6,[["group",3]]]],[[["",0]],["rrc",6,[["cell",3]]]],[[["span",3]]],[[["",0]],["vec",3,[["rrc",6,[["port",3]]]]]],[[["guard",4]]],[[["",0]]],[[["",0]],["str",0]],[[["assignment",3]],["string",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0]]],[[]],[[["",0]]],nullrrc",6,[["port",3]]],["rrc",6,[["port",3]]],["guard",4]],["assignment",3]],[[["",0]],["canonical",3]],[[["",0]],["rrc",6,[["cell",3]]]],null,[[["",0]]],[[["",0]],["attributes",3]],[[["",0]]],[[["control",4]],["control",4]],[[["",0]],["portcomp",4]],[[["",0]],["guard",4]],[[["",0]],["id",3]],[[["",0]],["primitive",3]],[[["",0]],["portdef",3]],[[["",0]],["width",4]],[[["",0]],["direction",4]],[[["",0]],["portparent",4]],[[["",0]],["port",3]],[[["",0]],["canonical",3]],[[["",0]],["celltype",4]],[[["",0]],["assignment",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["id",3]],[[["",0],["",0]],["ordering",4]],[[["",0],["id",3]],["ordering",4]],[[["",0],["canonical",3]],["ordering",4]],null,null,null,null,null,null,null,[[["u64",0],["u64",0]],["id",3]],null,null,[[["control",4]],["string",3]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["option",4,[["span",3]]]],[[["",0]],["option",4,[["span",3]]]],[[]],[[]],[[],["librarysignatures",3]],[[],["backendconf",3]],[[]],[[],["result",4]],null,null,[[["",0]],["assignment",3]],[[["",0]],["assignment",3]],[[["",0]]],null,[[]],[[]],[[["rrc",6,[["group",3]]]]],null,null,[[["",0],["portcomp",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["guard",4]]],[[["",0],["",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["direction",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["canonical",3]],["bool",0]],[[["",0],["celltype",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["vec",3,[["pathbuf",3]]]],[[],["vec",3]],null,null,[[["",0],["",0]],["option",4,[["rrc",6]]]],[[["",0]],["option",4,[["rrc",6,[["port",3]]]]]],[[["",0],["",0]],["option",4,[["rrc",6,[["port",3]]]]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["option",4,[["rrc",6,[["cell",3]]]]]],[[["",0],["",0]],["option",4,[["rrc",6,[["combgroup",3]]]]]],[[["",0],["",0]],["option",4,[["rrc",6,[["group",3]]]]]],[[["",0]],["option",4,[["primitive",3]]]],[[["",0]],["option",4,[["rrc",6,[["port",3]]]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["option",4]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rrc",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rrc",6,[["port",3]]]]],[[["expr",4,[["guard",4]]]]],[[]],[[["string",3]]],[[["str",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["guard",4]]],[[["",0]],["id",3]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["rrc",6,[["port",3]]]],[[["",0]],["rrc",6,[["port",3]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["attributes",3]]]],[[["",0]],["option",4,[["id",3]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["id",3]],[[["",0]],["primitive",3]],[[["",0]],["vec",3,[["portdef",3,[["u64",0]]]]]],[[["",0]],["rrc",6,[["port",3]]]],null,null,[[["guard",4]]],null,[[["guard",4]],["string",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["rrc",6,[["port",3]]],["option",4,[["rrc",6,[["combgroup",3]]]]],["box",3,[["control",4]]],["box",3,[["control",4]]]]],[[["",0],["",0]],["u64",0]],null,null,[[["",0],["u64",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rrc",6,[["cell",3]]],["vec",3],["vec",3]]],null,null,[[["",0]],["bool",0]],[[["",0],["u64",0],["u64",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["option",4]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["guard",4]]],[[["",0]],["usize",0]],null,[[["guard",4]]],null,[[["",0]],["id",3]],[[["",0]],["id",3]],[[["",0]],["id",3]],[[["",0]],["id",3]],[[["",0]],["id",3]],[[["",0]],["id",3]],[[["",0]],["id",3]],null,null,null,null,[[["",0],["canonical",3]],["bool",0]],[[["",0],["celltype",4]],["bool",0]],[[["guard",4]]],[[["component",3],["librarysignatures",3]]],[[["vec",3,[["portdef",3,[["u64",0]]]]],["bool",0]]],[[["tostring",8],["option",4,[["span",3]]]]],[[["id",3],["celltype",4]]],[[["id",3]]],[[["",0]],["option",4]],[[]],[[]],[[["",0]],["string",3]],[[["guard",4]]],null,[[["vec",3,[["control",4]]]]],null,null,[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0],["id",3]],["option",4,[["ordering",4]]]],[[["",0],["canonical",3]],["option",4,[["ordering",4]]]],[[["rrc",6,[["port",3]]]]],null,null,null,[[["port",3]],["string",3]],[[["",0]],["smallvec",3]],null,null,null,[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["calyxresult",6]],[[["linkedhashmap",3]],["calyxresult",6,[["portdef",3,[["u64",0]]]]]],[[["",0]],["u64",0]],[[["",0]]],null,[[["vec",3,[["control",4]]]]],[[["",0]],["result",4]],null,null,[[["",0]]],null,null,null,[[["",0]],["option",4,[["string",3]]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3]],["calyxresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["option",4,[["id",3]]]],[[["",0]]],[[["",0]],["rrc",6]],[[]],[[["",0],["visitor",8],["component",3],["librarysignatures",3]],["visresult",6]],[[["rrc",6,[["port",3]]],["option",4,[["rrc",6,[["combgroup",3]]]]],["box",3,[["control",4]]]]],null,null,[[["assignment",3],["usize",0],["",0]],["result",6]],[[["cell",3],["usize",0],["",0]],["result",6]],[[["combgroup",3],["usize",0],["",0]],["result",6]],[[["component",3],["",0]],["result",6]],[[["control",4],["usize",0],["",0]],["result",6]],[[["",0]],["result",6]],[[["group",3],["usize",0],["",0]],["result",6]],[[["primitive",3],["usize",0],["",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["workspace",3]],["calyxresult",6,[["context",3]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["rrc",6]],["option",4,[["rrc",6,[["port",3]]]]]],[[["",0],["id",3]],["option",4,[["rrc",6,[["cell",3]]]]]],[[]],[[["cellrewritemap",6],["portrewritemap",6]]],[[["",0],["control",4],["hashmap",3],["combgrouprewritemap",6]]],[[["",0],["invoke",3],["combgrouprewritemap",6]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["calyxresult",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["control",4]]],[[["",0]]],[[],["str",0]],[[["",0],["context",3]],["calyxresult",6]],[[["",0],["context",3]],["calyxresult",6]],[[["context",3]],["calyxresult",6]],[[["context",3]],["calyxresult",6]],[[["",0],["empty",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["empty",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["context",3]],["calyxresult",6]],[[]],[[]],[[["context",3]],["vec",3,[["bool",0]]]],[[["context",3]],["vec",3,[["bool",0]]]],[[]],[[]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[],["str",0]],[[["vec",3,[["component",3]]]]],[[],["bool",0]],[[],["bool",0]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[],["vec",3,[["component",3]]]],[[["",0],["component",3],["librarysignatures",3]],["calyxresult",6]],[[["",0],["component",3],["librarysignatures",3]],["calyxresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["visitor",8],["component",3],["librarysignatures",3]],["visresult",6]],null,null,null,[[["",0],["string",3],["vec",3,[["string",3]]]],["calyxresult",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["passmanager",3]],[[],["calyxresult",6]],[[["",0],["context",3]],["calyxresult",6]],[[]],[[]],[[["",0]],["calyxresult",6]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullclkinsertion",3]],[[],["collapsecontrol",3]],[[],["compileempty",3]],[[],["compileinvoke",3]],[[],["compilesync",3]],[[],["componentinterface",3]],[[],["deadcellremoval",3]],[[],["deadgroupremoval",3]],[[],["goinsertion",3]],[[],["grouptoseq",3]],[[],["holeinliner",3]],[[],["lowerguards",3]],[[],["mergeassign",3]],[[],["mergestaticpar",3]],[[],["partoseq",3]],[[],["registerunsharing",3]],[[],["removecombgroups",3]],[[],["removeids",3]],[[],["resetinsertion",3]],[[],["simplifyguards",3]],[[],["staticparconv",3]],[[],["unrollbounded",3]],[[],["wireinliner",3]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[["",0],["empty",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["enable",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["context",3]],["calyxresult",6]],[[]],[[]],[[["context",3]],["calyxresult",6]],[[]],[[["context",3]],["calyxresult",6]],[[["context",3]],["calyxresult",6]],[[]],[[["context",3]],["calyxresult",6]],[[]],[[]],[[["context",3]],["calyxresult",6]],[[["context",3]],["calyxresult",6]],[[]],[[["context",3]],["calyxresult",6]],[[]],[[]],[[["context",3]],["calyxresult",6]],[[["context",3]],["calyxresult",6]],[[]],[[]],[[]],[[["context",3]],["calyxresult",6]],[[["context",3]],["calyxresult",6]],[[]],[[["context",3]],["calyxresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["invoke",3],["component",3],["librarysignatures",3]],["visresult",6]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["str",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["if",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["par",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["seq",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[["",0],["while",3],["component",3],["librarysignatures",3]],["visresult",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]]],[[["",0],["",0],["",0]]],[[["",0],["hashset",3,[["string",3]]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["namegenerator",3]],[[["",0],["",0]]],[[["",0],["",0]],["bool",0]],[[]],[[]],[[["",0],["",0]],["usize",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["bool",0]]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["",0]],["id",3]],[[["",0]],["box",3,[["write",8]]]],null,null,[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["",0]]],[[["",0]],["hashmap",3,[["nodeindex",6]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["hashset",3,[["string",3]]]]],[[]],null,[[["u64",0]],["u64",0]]],"p":[[6,"RRC"],[3,"ShareSet"],[3,"GraphAnalysis"],[3,"ScheduleConflicts"],[3,"ControlId"],[3,"ControlOrder"],[3,"ControlPorts"],[3,"DataflowOrder"],[3,"GraphColoring"],[3,"PortInterface"],[3,"ReadWriteSet"],[3,"VariableDetection"],[3,"DominatorMap"],[3,"LiveRangeAnalysis"],[4,"GroupOrInvoke"],[3,"MetadataMap"],[3,"DefSet"],[3,"ReachingDefinitionAnalysis"],[13,"Group"],[13,"Invoke"],[4,"ErrorKind"],[3,"Error"],[3,"Span"],[8,"WithPos"],[13,"ParseError"],[13,"ReservedName"],[13,"MalformedControl"],[13,"MalformedStructure"],[13,"PassAssumption"],[13,"Undefined"],[13,"AlreadyBound"],[13,"Unused"],[13,"Papercut"],[13,"ImpossibleLatencyAnnotation"],[13,"Misc"],[13,"InvalidFile"],[13,"WriteError"],[3,"Workspace"],[4,"GuardExpr"],[4,"NumType"],[4,"Port"],[4,"Control"],[4,"GuardComp"],[4,"Atom"],[3,"ComponentDef"],[3,"Cell"],[3,"Group"],[3,"Wire"],[3,"NamespaceDef"],[3,"BitNum"],[3,"Guard"],[3,"Proto"],[13,"Port"],[13,"Num"],[13,"Seq"],[13,"Par"],[13,"If"],[13,"While"],[13,"Enable"],[13,"Invoke"],[13,"And"],[13,"Or"],[13,"Not"],[13,"CompOp"],[13,"Atom"],[13,"Comp"],[13,"Hole"],[13,"This"],[4,"Rule"],[4,"AliasedRule"],[3,"CalyxParser"],[3,"Canonical"],[4,"Guard"],[4,"PortParent"],[4,"CellType"],[4,"Width"],[4,"Control"],[4,"PortComp"],[4,"Direction"],[3,"IdList"],[3,"Cell"],[3,"Builder"],[3,"Attributes"],[3,"Id"],[3,"Printer"],[3,"Group"],[3,"CombGroup"],[3,"Component"],[3,"Seq"],[3,"Par"],[3,"If"],[3,"While"],[3,"Enable"],[3,"Invoke"],[3,"Primitive"],[3,"PortDef"],[3,"Port"],[3,"Assignment"],[3,"Context"],[3,"PortIterator"],[3,"WRC"],[3,"LibrarySignatures"],[3,"BackendConf"],[3,"Empty"],[8,"CloneName"],[8,"GetAttributes"],[8,"GetName"],[13,"Primitive"],[13,"Component"],[13,"Constant"],[13,"Seq"],[13,"Par"],[13,"If"],[13,"While"],[13,"Invoke"],[13,"Enable"],[13,"Empty"],[13,"Or"],[13,"And"],[13,"Not"],[13,"CompOp"],[13,"Port"],[13,"Cell"],[13,"Group"],[13,"Const"],[13,"Param"],[3,"Rewriter"],[4,"Action"],[3,"PostOrder"],[8,"ConstructVisitor"],[8,"Named"],[8,"Visitor"],[8,"Visitable"],[13,"Change"],[3,"PassManager"],[3,"Canonicalize"],[3,"CellShare"],[3,"CombProp"],[3,"CompileRef"],[3,"ComponentInliner"],[3,"Externalize"],[3,"GroupToInvoke"],[3,"InferShare"],[3,"InferStaticTiming"],[3,"Papercut"],[3,"SynthesisPapercut"],[3,"TopDownCompileControl"],[3,"TopDownStaticTiming"],[3,"WellFormed"],[3,"ClkInsertion"],[3,"CollapseControl"],[3,"CompileEmpty"],[3,"CompileInvoke"],[3,"CompileSync"],[3,"ComponentInterface"],[3,"DeadCellRemoval"],[3,"DeadGroupRemoval"],[3,"GoInsertion"],[3,"GroupToSeq"],[3,"HoleInliner"],[3,"LowerGuards"],[3,"MergeAssign"],[3,"MergeStaticPar"],[3,"ParToSeq"],[3,"RegisterUnsharing"],[3,"RemoveCombGroups"],[3,"RemoveIds"],[3,"ResetInsertion"],[3,"SimplifyGuards"],[3,"StaticParConv"],[3,"UnrollBounded"],[3,"WireInliner"],[4,"OutputFile"],[3,"WeightGraph"],[3,"NameGenerator"],[3,"BoolIdx"],[13,"File"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};