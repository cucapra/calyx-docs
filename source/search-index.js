var searchIndex = JSON.parse('{\
"calyx_frontend":{"doc":"Frontend parsing and AST representation.","t":[4,3,13,13,4,13,13,13,13,13,17,13,4,13,13,13,13,13,8,13,13,13,13,13,4,13,13,2,13,13,13,4,13,13,3,13,3,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,11,11,11,11,0,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,12,12,0,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,4,13,13,13,3,3,13,6,13,13,3,4,13,13,13,13,13,3,13,3,4,4,13,13,13,13,13,13,3,13,13,13,13,4,13,13,13,13,4,13,3,13,3,3,4,13,13,13,13,13,13,3,13,13,3,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,3,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13],"n":["Attribute","Attributes","BEGIN_ID","Bool","BoolAttr","Bound","Clk","Const","Control","DEAD","DEPRECATED_ATTRIBUTES","Data","Direction","Done","END","END_ID","External","Generated","GetAttributes","Go","Inline","Inout","Input","Internal","InternalAttr","LOOP","NODE_ID","NamespaceDef","NewFSM","NoInterface","Num","NumAttr","Output","Param","PortDef","Pos","Primitive","PromoteStatic","ReadTogether","Reset","START","ST_ID","Share","Stable","StateShare","Static","Sync","TopLevel","Unknown","Width","Workspace","WriteTogether","add_span","as_ref","as_ref","as_ref","ast","attributes","attributes","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","construct","construct_shallow","copy_span","declarations","default","default","direction","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","externs","find_all_with_attr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_compile_lib","from_repr","from_str","from_str","from_str","get","get_attributes","get_hash","get_hash","get_hash","get_hash","get_hash","get_mut_attributes","has","hash","hash","hash","hash","hash","insert","into","into","into","into","into","into","into","into","into","into","is_comb","is_empty","latency","metadata","name","name","name","original_imports","params","parser","remove","resolve","resolve","reverse","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","0","0","0","0","value","value","And","And","Atom","Atom","Atom","Binary","BitNum","Cell","Comp","CompGuard","CompOp","CompOp","ComponentDef","Control","Decimal","Empty","Enable","Eq","Geq","Group","Gt","Guard","GuardComp","GuardExpr","Hex","Hole","If","Invoke","Leq","Lt","NamespaceDef","Neq","Not","Not","Num","NumType","Octal","Or","Or","Par","Port","Port","Proto","Seq","StaticGroup","StaticGuard","StaticGuardExpr","StaticIf","StaticInfo","StaticInvoke","StaticPar","StaticRepeat","StaticSeq","StaticWire","This","While","Wire","attributes","attributes","attributes","attributes","attributes","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells","components","construct","construct_from_str","continuous_assignments","control","dest","dest","empty","expr","expr","externs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_attributes","groups","guard","guard","imports","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_comb","is_comb","latency","latency","metadata","name","name","name","name","name","new","num_type","params","prototype","reference","signature","span","src","src","static_groups","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","width","wires","wires","0","0","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","body","body","comb_group","comp","comp","comp","cond","cond","fbranch","fbranch","inputs","inputs","latency","latency","latency","latency","num_repeats","outputs","outputs","port","port","port","ref_cells","ref_cells","stmts","stmts","stmts","stmts","tbranch","tbranch","0","0","0","0","0","1","1","component","group","name","port","port","0","0","0","0","0","0","1","1","AliasedRule","COMMENT","CalyxParser","EOI","EOI","LHS","LHS","Rule","WHITESPACE","any_char","any_char","args","args","at_attribute","at_attribute","at_attributes","at_attributes","attr_val","attr_val","attribute","attribute","attributes","attributes","bad_num","bad_num","binary","binary","bitwidth","bitwidth","block","block","block_char","block_char","block_string","block_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","both_comb_static","both_comb_static","cell","cell","cell_without_semi","cell_without_semi","cells","cells","char","char","clone","clone","clone_into","clone_into","cmp","cmp","cmp_expr","cmp_expr","comb","comb","comb_or_static","comb_or_static","component","component","connections","connections","control","control","decimal","decimal","empty","empty","enable","enable","eq","eq","equivalent","equivalent","expr","expr","ext","ext","extern_or_component","extern_or_component","externs_and_comps","externs_and_comps","file","file","fmt","fmt","from","from","from","get_hash","get_hash","group","group","guard_and","guard_eq","guard_eq","guard_expr","guard_expr","guard_geq","guard_geq","guard_gt","guard_gt","guard_leq","guard_leq","guard_lt","guard_lt","guard_neq","guard_neq","guard_not","guard_not","guard_or","hash","hash","hex","hex","hole","hole","ident_syms","identifier","identifier","if_stmt","if_stmt","import","imports","imports","inputs","inputs","into","into","into","invoke","invoke","invoke_arg","invoke_arg","invoke_args","invoke_args","invoke_ref_arg","invoke_ref_arg","invoke_ref_args","invoke_ref_args","io_port","io_port","latency_annotation","latency_annotation","metadata","metadata","metadata_char","metadata_char","name_with_attribute","name_with_attribute","num_lit","num_lit","octal","octal","operator","outputs","outputs","par","par","params","params","parse","parse","parse_file","partial_cmp","partial_cmp","port","port","port_with","port_with","prim_inline","prim_inline","primitive","primitive","reference","reference","repeat_stmt","repeat_stmt","semi","semi","seq","seq","sig_with_params","sig_with_params","signature","signature","static_annotation","static_annotation","static_group","static_group","static_guard_expr","static_guard_expr","static_if_stmt","static_if_stmt","static_invoke","static_invoke","static_optional_latency","static_optional_latency","static_par","static_par","static_seq","static_seq","static_switch_stmt","static_switch_stmt","static_term","static_term","static_timing_expr","static_timing_expr","static_wire","static_wire","static_word","static_word","stmt","stmt","stmts_without_block","stmts_without_block","string_lit","string_lit","switch_stmt","switch_stmt","term","term","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","while_stmt","while_stmt","wire","wire"],"q":["calyx_frontendcalyx_frontend::Attribute","","","","calyx_frontend::Width","","calyx_frontend::astcalyx_frontend::ast::Atom","","calyx_frontend::ast::Control","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx_frontend::ast::GuardExpr","","","","","","","calyx_frontend::ast::Port","","","","","calyx_frontend::ast::StaticGuardExpr","","","","","","","","calyx_frontend::parserd":["Defines the known attributes that can be attached to IR …","Attributes associated with a specific IR structure.","","","Attributes that are only allowed to take boolean values.","The bound of a while loop","Clk for the signal","The width is a constant.","This is a control path instance","","Attributes that have been deprecated.","This is a data path instance","Direction of a port on a cell.","","","","Cell should be externalized","IR Node was generated by the compiler","Structs that can return an <code>Attributes</code> instance.","","Inline this subcomponent","Input-Output “port”. Should only be used by holes.","Input port.","","Internal attributes that cannot be parsed back from the IL.","","","","Generate a new FSM for this control node","The component doesn’t have a standard interface","","Attributes that can take numeric values","Output port.","The width is a parameter.","Definition of a port parameterized by a width type. Ports …","Source location position for this node","Representation of a external primitive definition.","Promote the group or control to static with the annotated …","","Reset signal for the component","","","Is this component shareable","Is the port connected to a state element","Is the component state shareable","Latency information","Synchronize this thread with others in the current par …","This is the top-level component","Unknown attribute. Should not appear in the Calyx codebase.","Represents an abstract width of a primitive signature.","A Workspace represents all Calyx files transitively …","","Set the span information","","","","Abstract Syntax Tree for Calyx","Key-value attributes for this primitive.","Attributes attached to this port definition","body of the string, if it is an inlined primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of component definitions that need to be compiled.","Construct a new workspace from an input stream …","Construct the Workspace using the given NamespaceDef and …","","List of component definitions that should be used as …","","","The direction of the port. Only allowed to be …","","","","","","","","","","","Absolute path to extern definitions and primitives defined …","Return all ports that have the attribute <code>attr</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new workspace using the <code>compile.futil</code> library …","Try to create Self from the raw representation","","","","Get the value associated with an attribute key","Returns an <code>Attributes</code> instance","","","","","","Returns a mutable <code>Attributes</code> instance","Check if an attribute key has been set","","","","","","Add a new attribute","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True iff this is a combinational primitive","Returns true if there are no attributes","(Optional) latency; for static primitives","Optional opaque metadata attached to the top-level file","","Name of this primitive.","The name of the port.","Original import statements present in the top-level file.","Paramters for this primitive.","Parser for Calyx programs.","Remove attribute with the name <code>key</code>","Retuns the bindings for all the paramters, the input ports …","Given a map from names of parameters to their values, …","Return the direction opposite to the current direction","The input/output signature for this primitive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width of the port. .","","","","","","","","","Atomic operations used in guard conditions and RHS of the …","","","","Custom bitwidth numbers","The Cell AST nodes.","Refers to the port named <code>port</code> on the subcomponent <code>component</code>…","Guard Comparison Type","","","AST statement for defining components.","Control AST nodes. Since enables and static enables are …","","Control statement that does nothing.","Runs the control for a list of subcomponents.","","","","","Guards <code>expr</code> using the optional guard condition <code>guard</code>.","Possible comparison operators for guards.","The AST for GuardExprs","","<code>group[name]</code> parses into <code>Hole { group, name }</code> and is a hole …","Standard imperative if statement","Invoke component with input/output assignments.","","","Corresponds to an individual Calyx file.","","","","A constant.","","","","","Represents parallel composition of control statements.","Statement that refers to a port on a subcomponent. This is …","Accessing a particular port on a component.","Prototype of the cell definition","Represents sequential composition of control statements.","","Guards <code>expr</code> using the optional guard condition <code>guard</code>.","The AST for StaticGuardExprs","Static if statement.","","Invoke component with input/output assignments.","Represents parallel composition of static control …","Static Repeat (essentially a bounded while loop w/o a …","Represents sequential composition of static control …","Data for the <code>-&gt;</code> structure statement.","Refers to the port named <code>port</code> on the component currently …","Standard imperative while statement","Data for the <code>-&gt;</code> structure statement.","Attributes attached to this component","Attributes attached to this cell definition","","","Attributes for this assignment","Attributes for this assignment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of instantiated sub-components","List of component definitions.","Construct a namespace from a file or the input stream. If …","Construct a namespace from a definition using a string.","List of continuous assignments","Single control statement for this component.","Guarded destinations of the wire.","Guarded destinations of the wire.","","","","Extern statements and any primitive declarations in them.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a primitive cell instantiation.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","List of groups","","","Path to extern files.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True iff this is a combinational component","","(Optional) latency of component, if it is static","","Optional opaque metadata","Name of the component.","Name of the primitive.","Name of the cell.","","","","","Parameter binding for primitives","Name of the prototype this cell was built from.","Whether this cell is external","Defines input and output ports along with their attributes.","","Source of the wire.","Source of the wire.","List of StaticGroups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Attributes","Control for the loop body.","Control for the true branch.","Combinational group that may execute with this invoke.","Group to be enabled","Name of the component to be invoked.","Name of the component to be invoked.","Modules that need to be enabled to send signal on <code>port</code>.","Modules that need to be enabled to send signal on <code>port</code>.","Control for the true branch.","Control for the true branch.","Input assignments","Input assignments","(optional) latency. Latency can be inferred if not given.","Optional latency for the seq","Optional latency for the par","Optional latency; should be the longer of the two branches","Control for the true branch.","Output assignments","Output assignments","Port that connects the conditional check.","Port that connects the conditional check.","Port that connects the conditional check.","External cells that may execute with this invoke.","External cells that may execute with this invoke.","List of <code>Control</code> statements to run in sequence.","List of <code>Control</code> statements to run in sequence.","List of <code>Control</code> statements to run in sequence. If not all …","List of <code>Control</code> statements to run in sequence. If not all …","Control for the true branch.","Control for the true branch.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a Calyx program into an AST representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,7,0,5,3,11,3,6,0,3,0,5,6,6,3,3,0,5,3,12,12,7,0,6,6,0,3,3,7,0,12,11,0,5,0,5,5,3,6,6,3,3,3,5,5,3,7,0,0,5,1,3,5,6,0,8,10,8,3,5,6,7,1,8,10,11,12,15,3,5,6,7,1,8,10,11,12,15,3,5,6,7,1,8,10,11,12,3,5,6,7,1,8,10,11,12,15,15,15,1,15,1,15,10,3,5,6,7,12,3,5,6,7,12,15,8,3,3,5,5,6,7,7,1,8,10,11,11,12,3,5,6,7,7,7,7,1,8,10,10,10,11,12,15,15,3,3,5,7,1,55,3,5,6,7,12,55,1,3,5,6,7,12,1,3,5,6,7,1,8,10,11,12,15,8,1,8,15,8,8,10,15,8,0,1,8,10,12,8,3,5,6,7,1,8,10,11,12,3,5,7,11,1,3,3,5,5,6,7,1,1,8,10,11,12,15,3,5,6,7,1,8,10,11,12,15,3,5,6,7,1,8,10,11,12,15,10,56,57,58,59,60,61,37,38,0,37,38,34,0,0,33,0,37,38,0,0,34,31,31,39,39,0,39,0,0,0,34,33,31,31,39,39,0,39,37,38,36,0,34,37,38,31,0,36,0,31,0,0,0,31,38,31,31,31,31,0,33,31,0,32,43,44,45,46,47,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,32,30,30,30,32,32,46,47,31,40,41,30,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,30,32,33,34,35,36,37,38,39,40,41,42,43,43,44,45,46,47,31,31,32,40,41,30,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,32,44,32,45,30,32,42,43,44,45,32,35,42,43,43,32,35,46,47,32,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,31,35,35,44,45,62,63,64,65,66,67,68,69,70,71,72,73,74,75,67,75,69,68,69,70,66,67,66,74,69,70,70,72,73,74,75,69,70,66,67,74,69,70,64,65,72,73,66,74,76,77,78,79,80,76,77,81,82,82,81,83,84,85,86,87,88,89,84,85,0,49,0,49,50,49,50,0,49,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,90,50,49,90,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,90,50,49,50,49,50,49,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,49,50,49,50,49,50,49,49,50,49,50,49,49,50,49,50,49,90,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,49,50,49,50,49,50,90,90,90,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,90,50,49,90,50,49,90,50,49,50,49,50],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[3,4],[5,4],[6,4],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[5,5],[6,6],[7,7],[1,1],[8,8],[[[10,[9]]],[[10,[9]]]],[11,11],[12,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[13,14],[[16,[15]]]],[[13,14],[[16,[15]]]],[1,2],0,[[],1],[[],15],0,[[3,3],17],[[5,5],17],[[6,6],17],[[7,7],17],[[12,12],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[8,18],[[3,19],20],[[3,19],20],[[5,19],20],[[5,19],20],[[6,19],20],[[7,19],20],[[7,19],20],[[1,19],20],[[8,19],20],[[[10,[21]],19],20],[[11,19],20],[[11,19],20],[[12,19],20],[[]],[[]],[[]],[3,7],[6,7],[[]],[5,7],[[]],[[]],[[]],[[],[[10,[22]]]],[[],[[10,[11]]]],[[]],[[]],[[]],[[],[[16,[15]]]],[23,[[13,[3]]]],[4,[[24,[3]]]],[4,[[24,[5]]]],[4,[[16,[7]]]],[1,[[13,[22]]]],[[],1],[[],22],[[],22],[[],22],[[],22],[[],22],[[],1],[1,17],[3],[5],[6],[7],[12],[[1,22]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,17],0,0,[8,25],0,0,0,0,0,[1],[8,16],[[[10,[11]],26],[[16,[[10,[22]]]]]],[12,12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[1,4],27],[4,[[24,[3]]]],[[],24],[[],24],[4,[[24,[5]]]],[[],24],[[],24],[28,[[16,[1]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[13,[[16,[30]]]],[4,[[16,[30]]]],0,0,0,0,[[],31],0,0,0,[[30,19],20],[[32,19],20],[[33,19],20],[[34,19],20],[[35,19],20],[[36,19],20],[[37,19],20],[[38,19],20],[[39,19],20],[[40,19],20],[[41,19],20],[[42,19],20],[[43,19],20],[[44,19],20],[[45,19],20],[[46,19],20],[[47,19],20],[[31,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,25,[28,[22]],1,17],43],[[]],[[]],[[]],[[]],[[]],[31,1],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[17,[13,[48]],[28,[[10,[22]]]]],32],0,0,0,0,0,0,0,0,0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[49,49],[50,50],[[]],[[]],[[49,49],51],[[50,50],51],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[49,49],17],[[50,50],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,[[49,19],20],[[50,19],20],[[]],[[]],[[]],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[49],[50],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[49,4],[[24,[[52,[49]],[53,[49]]]]]],[54,[[16,[30]]]],[14,[[16,[30]]]],[[49,49],[[13,[51]]]],[[50,50],[[13,[51]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],29],[[],29],[[],29],0,0,0,0],"p":[[3,"Attributes"],[3,"GPosIdx"],[4,"BoolAttr"],[15,"str"],[4,"NumAttr"],[4,"InternalAttr"],[4,"Attribute"],[3,"Primitive"],[8,"Clone"],[3,"PortDef"],[4,"Width"],[4,"Direction"],[4,"Option"],[3,"Path"],[3,"Workspace"],[6,"CalyxResult"],[15,"bool"],[8,"Iterator"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u64"],[15,"u8"],[4,"Result"],[3,"Id"],[3,"LinkedHashMap"],[3,"String"],[3,"Vec"],[3,"TypeId"],[3,"NamespaceDef"],[4,"Control"],[3,"ComponentDef"],[4,"Port"],[4,"NumType"],[3,"BitNum"],[4,"Atom"],[4,"GuardExpr"],[4,"StaticGuardExpr"],[4,"GuardComp"],[3,"Guard"],[3,"StaticGuard"],[3,"Proto"],[3,"Cell"],[3,"Group"],[3,"StaticGroup"],[3,"Wire"],[3,"StaticWire"],[3,"NonZeroU64"],[4,"Rule"],[4,"AliasedRule"],[4,"Ordering"],[3,"Pairs"],[3,"Error"],[8,"Read"],[8,"GetAttributes"],[13,"Bool"],[13,"Num"],[13,"Internal"],[13,"Unknown"],[13,"Const"],[13,"Param"],[13,"Port"],[13,"Num"],[13,"Seq"],[13,"Par"],[13,"If"],[13,"While"],[13,"Enable"],[13,"Invoke"],[13,"StaticInvoke"],[13,"Empty"],[13,"StaticSeq"],[13,"StaticPar"],[13,"StaticIf"],[13,"StaticRepeat"],[13,"And"],[13,"Or"],[13,"Not"],[13,"CompOp"],[13,"Atom"],[13,"Comp"],[13,"Hole"],[13,"This"],[13,"And"],[13,"Or"],[13,"Not"],[13,"CompOp"],[13,"Atom"],[13,"StaticInfo"],[3,"CalyxParser"]]},\
"calyx_ir":{"doc":"Internal representation for the Calyx compiler.","t":[12,12,13,13,3,4,3,13,3,6,13,4,13,3,3,3,13,4,13,3,3,13,13,3,13,13,13,3,4,13,13,17,13,4,13,13,13,13,3,13,13,3,13,13,13,13,4,13,4,13,8,8,13,3,13,13,4,3,3,3,3,3,13,13,13,13,13,13,13,4,3,13,13,13,13,3,13,13,13,13,13,13,13,3,13,4,13,13,13,3,13,13,13,3,13,13,4,3,3,4,13,3,13,3,13,17,6,13,13,13,2,13,13,3,13,13,13,13,13,13,13,13,4,3,3,13,3,3,3,3,3,3,13,13,13,13,13,13,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,12,11,12,10,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,12,12,11,11,11,11,11,12,12,12,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,12,12,12,12,14,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","1","And","And","Assignment","Attribute","Attributes","BEGIN_ID","BackendConf","Binding","Bool","BoolAttr","Bound","Builder","Canonical","Cell","Cell","CellType","Clk","Cloner","CombGroup","CompOp","CompOp","Component","Component","Const","Constant","Context","Control","Control","DEAD","DEPRECATED_ATTRIBUTES","Data","Direction","Done","Dynamic","END","END_ID","Empty","Empty","Empty","Enable","Enable","Enable","Eq","External","FlatGuard","Generated","GenericControl","Geq","GetAttributes","GetName","Go","Group","Group","Gt","Guard","GuardPool","GuardRef","Id","IdList","If","If","If","Info","Inline","Inout","Input","Internal","InternalAttr","Invoke","Invoke","Invoke","LOOP","Leq","LibrarySignatures","Lt","NODE_ID","Neq","NewFSM","NoInterface","Not","Not","Nothing","Num","NumAttr","Or","Or","Output","Par","Par","Par","Param","Port","Port","Port","PortComp","PortDef","PortIterator","PortParent","Pos","Primitive","Primitive","Printer","PromoteStatic","RESERVED_NAMES","RRC","ReadTogether","Repeat","Reset","Rewriter","START","ST_ID","Seq","Seq","Seq","Share","Stable","StateShare","Static","Static","Static","StaticControl","StaticEnable","StaticGroup","StaticGroup","StaticIf","StaticInvoke","StaticPar","StaticRepeat","StaticSeq","StaticTiming","Sync","ThisComponent","TopLevel","True","True","Unknown","WRC","While","While","Width","WriteTogether","add","add_attribute","add_comb_group","add_component","add_constant","add_continuous_assignments","add_group","add_interval","add_primitive","add_span","add_static_group","all_ports","all_prims","and","append","as_ref","as_ref","as_ref","as_ref","assignment_to_str","assignments","assignments","assignments","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","attributes","bc","bitand","bitand_assign","bitor","bitor_assign","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_assignment","build_assignments","canonical","cell_parent","cells","check_for_each_info","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","comb_group","comb_groups","comp","comp","component","components","cond","cond","constant_name","continuous_assignments","control","control","control_to_str","copy_span","copy_span","default","default","default","default","default","default","default","default","default","default","direction","direction","display","done_cond","done_cond_mut","drain","dst","empty","empty","empty","empty","enable","enable","enable_verification","entrypoint","entrypoint","entrypoint_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extern_paths","externs","extra_opts","fbranch","fbranch","find","find","find","find","find_all_with_attr","find_all_with_attr","find_cell","find_comb_group","find_group","find_primitive","find_static_group","find_with_attr","flat_assign","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each_assignment","for_each_info","for_each_interval","for_each_port","for_each_static_assignment","format_metadata","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ast","from_repr","from_str","from_str","from_str","ge","generate_name","get","get","get","get","get","get_attribute","get_attribute","get_attribute","get_attribute","get_attribute","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_attributes","get_groups","get_groups_mut","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_interval","get_latency","get_latency","get_latency","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_mut_attributes","get_name","get_parameter","get_parent_name","get_primitive","get_signature","get_static_groups","get_static_groups_mut","get_with_attr","group","group","groups","gt","guard","guard","guard_str","has","has_attribute","has_attribute","hash","hash","hash","hash","hash","hash","hash","hash","hash","holes","holes","id","if_","if_","index","inputs","inputs","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","invoke","invoke","is_comb","is_comb","is_comb_cell","is_component","is_constant","is_empty","is_empty","is_false","is_hole","is_not_done","is_primitive","is_reference","is_static","is_static","is_this","is_true","is_true","is_true","iter","iter","iter_assignments","iter_mut","iter_static_assignments","latency","latency","latency","latency","latency","latency","latency","latency","le","len","lib","lt","metadata","name","name","name","name","name","name","name","name","name","name","name","name","name","name","neq","new","new","new","new","new","new","new","new","new","next","not","not_generated","num_repeats","op_str","or","outputs","outputs","par","par","par","params","parent","parent_is_comb","partial_cmp","partial_cmp","partial_cmp","port","port","port","port","port_to_str","ports","ports","prim_inlines","prototype","ref_cells","ref_cells","remove","remove","remove_attribute","remove_attribute","repeat","repeat","resolve","resolve","retain","reverse","rewriter","seq","seq","seq","set_groups","set_interval","set_static_groups","signature","signature","signatures","src","static_control","static_enable","static_enable","static_groups","static_if","static_if","static_invoke","static_par","static_seq","stmts","stmts","stmts","stmts","structure","surface_name","synthesis_mode","tbranch","tbranch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","update","upgrade","validate","while_","while_","width","width","write_assignment","write_cell","write_comb_group","write_component","write_context","write_control","write_externs","write_group","write_primitive","write_static_control","write_static_group","0","0","0","0","is_comb","latency","name","name","param_binding","val","width","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","2","0","0","0","0","0","0","0","0","1","1","1","2","0","0","0","0","0","0","0","0","0","0","value","value","ast_to_ir","PortRewriteMap","RewriteMap","Rewriter","borrow","borrow_mut","from","get","get_cell_rewrite","into","new","rewrite_control","rewrite_invoke","rewrite_static_control","rewrite_static_invoke","try_from","try_into","type_id"],"q":["calyx_ircalyx_ir::Attribute","","","","calyx_ir::CellType","","","","","","","calyx_ir::Control","","","","","","","","calyx_ir::FlatGuard","","","","","","","","","calyx_ir::GenericControl","","calyx_ir::Guard","","","","","","","","","","calyx_ir::PortParent","","","calyx_ir::StaticControl","","","","","","","calyx_ir::Width","","calyx_ir::from_ast","calyx_ir::rewriter","","","","","","","","","","","","","","","",""],"d":["","","","Represents <code>c1 &amp;&amp; c2</code>.","Represents a guarded assignment in the program","Defines the known attributes that can be attached to IR …","Attributes associated with a specific IR structure.","","Configuration information for the backends.","Alias for bindings","","Attributes that are only allowed to take boolean values.","The bound of a while loop","IR builder. Uses internal references to the component to …","Canonical name of a Port","Represents an instantiated cell.","","The type for a Cell","Clk for the signal","Implement cloning operations on control statements. We …","A combinational group. A combinational group does not have …","","Comparison operator.","In memory representation of a Component.","Cell constructed using a Calyx component","The width is a constant.","Cell representing a Constant","The IR Context that represents an entire Calyx program …","Control AST nodes.","This is a control path instance","","Attributes that have been deprecated.","This is a data path instance","Direction of a port on a cell.","","","","","Data for the <code>empty</code> control statement.","Control statement that does nothing.","","Data for the <code>enable</code> control statement.","Runs the control for a list of subcomponents.","","p1 == p2","Cell should be externalized","","IR Node was generated by the compiler","Either holds a reference to a StaticControl, reference to …","p1 &gt;= p2","Structs that can return an <code>Attributes</code> instance.","A trait representing something in the IR that has a name.","","A Group of assignments that perform a logical action.","","p1 &gt; p2","An assignment guard which has pointers to the various …","A <code>GuardPool</code> is an “arena”-style storage area for …","","Represents an identifier in a Calyx program","A wrapper struct exposing an ordered collection of named …","Data for the <code>if</code> control statement.","Standard imperative if statement","","Other types of information.","Inline this subcomponent","Input-Output “port”. Should only be used by holes.","Input port.","","Internal attributes that cannot be parsed back from the IL.","Data for an <code>invoke</code> control statement.","Invoke a sub-component with the given port assignments","","","p1 &lt;= p2","A representation of all the primitive definitions found …","p1 &lt; p2","","p1 != p2","Generate a new FSM for this control node","The component doesn’t have a standard interface","","Represents <code>!c1</code>","","","Attributes that can take numeric values","","Represents <code>c1 || c2</code>.","Output port.","Data for the <code>par</code> control statement.","Represents parallel composition of control statements.","","The width is a parameter.","Represents a port on a cell.","","Uses the value on a port as the condition. Same as …","Comparison operations that can be performed between ports …","Definition of a port parameterized by a width type. Ports …","Wraps generic iterators over ports to allow functions to …","Ports can come from Cells or Groups","Source location position for this node","Representation of a external primitive definition.","Cell constructed using a primitive definition","Printer for the IR.","Promote the group or control to static with the annotated …","Names that are reserved in Calyx and Verilog.","Alias for a RefCell contained in an Rc reference.","","Essentially a Static While Loop","Reset signal for the component","","","","Data for the <code>seq</code> control statement.","Represents sequential composition of control statements.","","Is this component shareable","Is the port connected to a state element","Is the component state shareable","Static Control","","Latency information","Control AST nodes.","Data for the <code>enable</code> control for a static group.","A Group of assignments that perform a logical action.","","Data for the <code>static if</code> control statement.","Data for a <code>StaticInvoke</code> control statement","","Data for the <code>StaticRepeat</code> control statement. Essentially a …","Data for the <code>static seq</code> control statement.","","Synchronize this thread with others in the current par …","This cell represents the current component","This is the top-level component","","The constant true","Unknown attribute. Should not appear in the Calyx codebase.","A Wrapper for a weak RefCell pointer. Used by parent …","Data for the <code>while</code> control statement.","Standard imperative while statement","Represents an abstract width of a primitive signature.","","Add a new element to the colleciton","Add a new attribute to the group.","Construct a combinational group","Add a component instance to this component using its name …","Return reference for a constant cell associated with the …","","Construct a new group and add it to the Component. The …","updates self -&gt; self &amp; interval","Consturcts a primitive cell of type <code>primitive</code>. The name of …","Set the span information","Construct a new static group and add it to the Component. …","Returns all the ports used by this guard.","","","Add all elements to the collection","","","","","Convinience method to get string representation of …","The assignments used in this group","The assignments used in this group","The assignments used in this group","Attributes for this component","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","Attributes attached to this control statement.","","Attributes associated with this port.","Attributes for this group.","Attributes for this assignment.","Attributes for this group.","Attributes for this group.","Attributes for this group.","Key-value attributes for this primitive.","Attributes attached to this port definition","Configuration flags for backends.","","","","","Control for the loop body.","Body to repeat","body of the string, if it is an inlined primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct an assignment.","Build guarded assignment statements and return a vector …","Get the canonical representation for this Port.","Returns the parent of the Port which must be Cell. Throws …","The cells instantiated for this component.","runs f(info) on each info in <code>guard</code>. f should return Result&lt;…","Removes all elements from the collection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional combinational group that is active when the …","Groups of assignment wires.","Cell that is being invoked.","Cell that is being invoked.","Component for which this builder is constructing.","The components for this program.","Optional combinational group attached using <code>with</code>.","Group that makes the signal on the conditional port valid.","Return the canonical name for the cell generated to …","The set of “continuous assignments”, i.e., assignments …","","The control program for this component.","Convinience method to get string representation of …","","","","","","","","","","","","","Direction of the port","The direction of the port. Only allowed to be …","","Returns a reference to the assignment in the group that …","Returns a mutable reference to the assignment in the group …","Removes all elements from the collection and returns an …","The destination for the assignment.","","Returns an empty iterator over ports.","Convience constructor for empty.","Convience constructor for empty.","","Convience constructor for enable.","Enables verification checks.","Return the entrypoint component.","Entrypoint for the program","Return the entrypoint component with mutable access.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the paths for the extern defining files","Return the underlying externs","Extra options provided to the command line. Interpreted by …","Control for the false branch.","Control for the false branch.","Returns the element indicated by the name, if present, …","Get a reference to the named port if it exists.","Get a reference to the named hole if it exists.","Get a reference to the named hole if it exists.","Return all ports that have the attribute <code>attr</code>.","Return all ports that have the attribute <code>attr</code>.","Return a reference to the cell with <code>name</code> if present.","Return a refernece to a combination group with <code>name</code> if …","Return a reference to the group with <code>name</code> if present.","Return the Primitive associated with the given name if …","Return a reference to the group with <code>name</code> if present.","Get a reference to the first port that has the attribute …","Use flat (ANF) assignments for guards instead of deep …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutates a guard by calling <code>f</code> on every leaf in the guard …","Apply function on all non-static assignments contained …","runs f(info) on each Guard::Info in <code>guard</code>. if <code>f(info)</code> = …","Apply function <code>f</code> to each port contained within the …","Apply function <code>f</code> to each port contained within the …","Apply function to all assignments within static groups.","Formats the top-level metadata if present","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Turns a normal guard into a static guard","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Turns a normal assignment into a static assignment","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Module to transform AST programs into IR.","Try to create Self from the raw representation","","","","","Construct a non-conflicting name using the Component’s …","","Get a reference to the named port and throw an error if it …","Get a reference to the named hole or panic.","Get a reference to the named hole or panic.","Get the value associated with an attribute key","Returns the value of an attribute if present","Returns the value of an attribute if present","Returns the value of an attribute if present","Returns the value of an attribute if present","Return the value associated with this attribute key.","Returns an <code>Attributes</code> instance","","","","","","","","","","","","","","","","","The attributes of this group.","The attributes of this group.","The attributes of this group.","gets the component’s groups","gets the component’s groups","","","","","","","","","","returns the (u64, u64) interval for <code>struct</code>","","Returns the value of an attribute if present","","Returns a mutable <code>Attributes</code> instance","","","","","","","","","","","","","","","","","Return the name associated with this CellType is present","Get parameter binding from the prototype used to build …","Gets name of parent object.","Return the Primitive associated to this Id.","","gets the component’s static groups","gets the component’s groups","Get a reference to the first port with the attribute <code>attr</code> …","List of components to run.","List of components to run.","Groups of assignment wires.","","The guard for this assignment.","Convinience macro to get a port and turn it into an …","Generate a String-based representation for a guard.","Check if an attribute key has been set","Returns true if the node has a specific attribute","Returns true if the node has a specific attribute","","","","","","","","","","Holes for this group","Holes for this group","","","Convience constructor for if","Get the underlying number for this reference. Clients …","Mapping from name of input ports in <code>comp</code> to the port …","Mapping from name of input ports in <code>comp</code> to the port …","Add a new attribute","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Convience constructor for invoke.","True iff component is combinational","True iff this is a combinational primitive","","Returns true iff this cell is an instance of a …","Checks if this port is a constant of value: <code>val</code>.","Returns true if there are no elements in the list.","Returns true if there are no attributes","Checks if the guard is always false. Returning false does …","Checks if this port is a hole","returns true if the self is !cell_name, false otherwise.","Returns true if this is an instance of a primitive. If the …","Get a boolean describing whether the cell is external.","Check whether this is a static component. A static …","","Returns true iff this cell is the signature of the current …","Check whether this refers to a <code>FlatGuard::True</code>. (We can do …","","Returns true definitely <code>Guard::True</code>. Returning false does …","Iterate over <em>all</em> the guards in the pool.","Returns an iterator over immutable references","Iterate over all non-static assignments contained within …","Returns an iterator over mutable references. Likely a …","Iterate over all static assignments contained within the …","(Optional) latency of component, if it is static","Latency, in cycles","Latency, in cycles","latency field currrently, if two if branches take …","latency = num_repeats * (body latency)","StaticLatency","Latency of static group","(Optional) latency; for static primitives","","","Library definitions imported by the program.","","An optional opaque metadata string which is used by Cider","Return a reference to the object’s name","Grants immutable access to the name of this cell.","","","The name of this group.","","The name of this group.","","The name of this group.","","Name of the component.","Name of the port","Name of this primitive.","The name of the port.","","Instantiate a new builder using for a component.","","","Construct a new PortIterator from an iterator over ports.","Construct a new Component with the given <code>name</code> and ports.","creates a new <code>StaticTiming</code> struct","Construct a cell","","","","","Disable the generated flag on the builder","Number of times to repeat the body","Return the string corresponding to the guard operation.","","Mapping from name of output ports in <code>comp</code> to the port …","Mapping from name of output ports in <code>comp</code> to the port …","","Convience constructor for par.","Convience constructor for static enable.","Paramters for this primitive.","Weak pointer to this port’s parent","Checks if parent is combinational component","","","","","Port that connects the conditional check.","Port that connects the conditional check.","Port that connects the conditional check.","Get the port access expression.","Returns a reference to all super::Port attached to this …","Ports on this cell","Return the underyling inlined primitives","Underlying type for this cell","Mapping from name of external cell in ‘comp’ to the …","Mapping from name of external cell in ‘comp’ to the …","","Remove attribute with the name <code>key</code>","","","","Convience constructor for static if","Retuns the bindings for all the paramters, the input ports …","Given a map from names of parameters to their values, …","Keep only the elements in the collection which satisfy the …","Return the direction opposite to the current direction","Modules to rewrite the IR","","Convience constructor for seq.","Convience constructor for static enable.","gets the component’s groups","overwrites the current <code>interval</code> to be <code>new_interval</code>","gets the component’s groups","The input/output signature of this component.","The input/output signature for this primitive.","Return an iterator over all defined primitives.","The source for the assignment.","","","Convience constructor for enable.","Groups of assignment wires","","Convience constructor for static if","","","","List of <code>Control</code> statements to run in sequence.","List of <code>StaticControl</code> statements to run in sequence.","List of <code>Control</code> statements to run in parallel.","List of <code>StaticControl</code> statements to run in parallel.","Add primitives and constants to the component and <code>let</code>-bind …","Generate string representation of CellType appropriate for …","Enables synthesis mode.","Control for the true branch.","Control for the true brancheturns the name of the component that is this cells type.","Update the guard in place. Replaces this guard with …","Convinience method to upgrade and extract the underlying …","Enable the validation flag on a builder.","","Convience constructor for while","Width of the port","The width of the port. .","Format and write an assignment.","Format and write a cell.","Format and write a combinational group.","Formats and writes the Component to the formatter.","Prints out the program context. <code>skip_primitives</code> controls …","Format and write a control program","Formats and writes extern statements.","Format and write a group.","","Format and write a static control program","Format and write a static group.","","","","","True iff this is a combinational primitive","(Optional) latency of the primitive","Name of the primitive cell used to instantiate this cell.","Name of the component used to instantiate this cell.","Bindings for the parameters. Uses Vec to retain the input …","Value of this constant","Width of this constant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct an IR representation using a parsed AST and …","Map to rewrite port uses. Maps the canonical name of an …","A rewrite map from ir::Id to [T].","A structure to track rewrite maps for ports. Stores both …","","","Returns the argument unchanged.","Get any port rewrite defined for the given port.","Return the rewrite for a cell","Calls <code>U::from(self)</code>.","","Given a control program, rewrite all uses of cells, …","Rewrite a <code>invoke</code> node using a RewriteMapir::Cell and a …","Given a control program, rewrite all uses of cells, …","Rewrite a <code>static invoke</code> node using a RewriteMapir::Cell …","","",""],"i":[29,29,34,16,0,0,0,27,0,0,5,0,26,0,0,0,37,0,25,0,0,34,16,0,38,40,38,0,0,25,27,0,25,0,26,71,27,27,0,43,48,0,43,48,35,25,0,25,0,35,0,0,26,0,37,35,0,0,0,0,0,0,43,48,16,25,41,41,5,0,0,43,48,27,35,0,35,27,35,25,25,34,16,0,5,0,34,16,41,0,43,48,40,0,34,16,0,0,0,0,26,0,38,0,26,0,0,26,48,25,0,27,27,0,43,48,25,25,25,43,71,26,0,0,0,37,0,0,0,0,0,0,26,38,25,34,16,5,0,0,43,0,26,2,4,8,8,8,8,8,16,8,17,8,16,21,16,2,23,25,26,27,87,14,19,9,51,60,61,62,63,64,65,66,67,49,68,69,70,46,20,4,13,14,19,9,39,10,50,16,16,16,16,66,67,39,8,50,23,88,44,87,47,32,51,2,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,38,4,13,14,19,9,25,26,27,5,17,39,10,40,41,8,50,23,88,44,87,47,32,51,2,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,38,4,13,14,19,9,25,26,27,5,17,39,10,40,41,8,0,20,20,51,16,2,23,32,33,34,12,35,16,15,37,20,29,38,13,25,26,27,5,17,39,10,40,41,23,32,33,34,12,35,16,15,37,20,29,38,13,25,26,27,5,17,39,10,40,41,23,16,29,69,51,69,70,8,50,64,66,4,51,88,51,87,43,17,23,44,2,21,45,46,12,16,15,17,20,10,44,14,14,2,13,88,47,43,48,88,43,45,50,50,50,23,23,23,23,23,23,12,35,16,16,15,20,29,38,25,26,27,5,41,23,12,35,16,15,20,29,38,25,26,27,5,41,21,21,50,64,65,2,4,14,19,4,39,51,51,51,21,51,4,45,44,23,23,32,51,2,21,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,29,38,4,13,14,19,9,25,25,26,26,27,5,5,17,39,10,40,40,41,16,51,16,13,13,51,87,8,50,23,23,23,88,44,87,47,32,32,51,2,2,21,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,43,43,43,48,48,48,71,71,71,33,34,12,35,16,16,16,15,37,20,29,38,4,13,13,14,19,9,25,26,27,5,5,5,5,17,39,10,10,10,40,41,0,25,25,26,5,16,51,44,4,14,19,17,68,43,48,20,4,89,60,61,62,63,64,65,66,67,49,68,69,70,43,48,20,4,14,19,9,51,51,23,16,29,38,25,26,27,5,41,15,43,48,19,89,60,61,62,63,64,65,66,67,49,68,69,70,43,48,20,4,38,4,20,21,4,51,51,4,49,68,51,16,13,0,87,17,43,20,23,16,29,38,25,26,27,5,41,14,19,23,88,43,33,69,70,17,8,50,23,88,44,87,47,32,51,2,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,38,4,13,14,19,9,25,26,27,5,17,39,10,40,41,47,2,88,43,51,39,4,4,20,2,17,16,20,16,4,4,51,43,4,33,34,16,44,2,51,2,51,51,61,63,65,67,70,19,39,16,2,50,16,50,1,4,4,14,14,19,19,9,9,39,51,20,39,10,16,8,23,44,47,51,15,4,14,19,47,16,8,67,16,16,69,70,88,43,48,39,20,20,23,16,29,16,64,65,66,87,4,4,21,4,69,70,2,17,14,19,88,48,39,10,2,41,0,88,43,48,51,15,51,51,39,21,13,88,88,43,51,88,48,88,88,88,60,61,62,63,0,38,45,64,65,23,32,33,34,12,35,16,15,37,20,29,38,13,25,26,27,5,17,39,10,40,41,23,12,15,29,25,26,5,40,17,8,50,23,88,44,87,47,32,51,2,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,38,4,13,14,19,9,25,25,26,26,27,5,17,17,39,10,40,41,8,50,23,88,44,87,47,32,51,2,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,38,4,13,14,19,9,25,26,27,5,17,39,10,40,41,8,50,23,88,44,87,47,32,51,2,21,45,60,61,62,63,64,65,66,67,49,68,69,70,46,43,48,71,33,34,12,35,16,15,37,20,29,38,4,13,14,19,9,25,26,27,5,17,39,10,40,41,4,16,32,8,88,43,20,10,87,87,87,87,87,87,87,87,87,87,87,90,91,92,93,94,94,94,95,94,96,96,97,98,99,100,101,102,103,104,105,106,107,108,109,105,106,108,108,110,111,112,113,114,115,116,117,112,113,115,115,118,119,120,121,122,123,124,125,126,127,128,129,0,0,0,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]]]],[[4,[6,[5]],7]],[8,[[3,[9]]]],[[8,[11,[[10,[7]]]]],[[3,[4]]]],[[8,7,7],[[3,[4]]]],[[8,[11,[[13,[12]]]]]],[8,[[3,[14]]]],[[[16,[15]],15]],[8,[[3,[4]]]],[[17,18],17],[[8,7],[[3,[19]]]],[16,[[11,[[3,[20]]]]]],[21,11],[[16,16],16],[[[2,[1]],22]],[23,24],[25,24],[26,24],[27,24],[13,28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[16,16]],[[16,16]],[[16,16]],[[16,16]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,[3,[20]],[3,[20]],16],13],0,[20,29],[20,[[3,[4]]]],0,[16,[[31,[30]]]],[[[2,[1]]]],[23,23],[32,32],[33,33],[34,34],[12,12],[35,35],[[[16,[36]]],[[16,[36]]]],[15,15],[37,37],[20,20],[29,29],[38,38],[[[13,[36]]],[[13,[36]]]],[25,25],[26,26],[27,27],[5,5],[17,17],[39,39],[10,10],[40,40],[41,41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[23,23],42],[[16,16],42],[[29,29],42],0,0,0,0,0,0,0,0,[[7,7],23],0,[43,43],0,[43,28],[43,18],[17,18],[[],23],[[],44],[[],[[2,[1]]]],[[],21],[[],45],[[],46],[[],12],[[],16],[[],15],[[],17],0,0,[[44,34],28],[14,13],[14,13],[[[2,[1]]],22],0,[46,46],[[],47],[[],43],[[],48],[49,49],[[[3,[14]]],43],0,[50,51],0,[50,51],[[23,24],52],[[23,53],52],[[23,23],52],[[23,23],52],[[23,24],52],[[23,28],52],[[12,12],52],[[35,35],52],[[16,16],52],[[16,16],16],[[15,15],52],[[20,20],52],[[29,29],52],[[38,38],52],[[25,25],52],[[26,26],52],[[27,27],52],[[5,5],52],[[41,41],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[21,[[11,[54]]]],[21,11],0,0,0,[[[2,[1]]],[[55,[[3,[1]]]]]],[4,[[55,[[3,[20]]]]]],[14,[[55,[[3,[20]]]]]],[19,[[55,[[3,[20]]]]]],[4,22],[39,22],[51,[[55,[[3,[4]]]]]],[51,[[55,[[3,[9]]]]]],[51,[[55,[[3,[14]]]]]],[21,[[55,[39]]]],[51,[[55,[[3,[19]]]]]],[4,[[55,[[3,[20]]]]]],0,[[44,16],33],[[23,56],[[31,[57]]]],[[23,56],[[31,[57]]]],[[[32,[58]],56],59],[[51,56],59],[[[2,[[0,[58,1]]]],56],59],[[21,56],59],[[60,56],59],[[61,56],59],[[62,56],59],[[63,56],59],[[64,56],59],[[65,56],59],[[66,56],59],[[67,56],59],[[49,56],59],[[68,56],59],[[69,56],59],[[70,56],59],[[46,56],59],[[43,56],59],[[48,56],59],[[71,56],59],[[33,56],59],[[34,56],59],[[12,56],59],[[35,56],59],[[[16,[58]],56],59],[[15,56],59],[[37,56],59],[[20,56],59],[[29,56],59],[[29,56],59],[[38,56],59],[[4,56],59],[[[13,[58]],56],59],[[14,56],59],[[19,56],59],[[9,56],59],[[25,56],[[31,[57]]]],[[25,56],[[31,[57]]]],[[26,56],[[31,[57]]]],[[26,56],[[31,[57]]]],[[27,56],[[31,[57]]]],[[5,56],[[31,[57]]]],[[5,56],[[31,[57]]]],[[17,56],[[31,[57]]]],[[39,56],[[31,[57]]]],[[10,56],[[31,[57]]]],[[40,56],[[31,[57]]]],[[40,56],[[31,[57]]]],[[41,56],[[31,[57]]]],[16],[51],[16],[13],[13],[51],[55,28],[[]],[[]],[24,23],[28,23],[[]],[[]],[[]],[[]],[[]],[[]],[3,32],[[]],[[]],[[],2],[[],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,43],[49,43],[[]],[69,43],[[[3,[19]]],48],[68,48],[[]],[43,71],[[]],[48,71],[[]],[[]],[[]],[[]],[[]],[[[3,[20]]],16],[[[16,[12]]],[[16,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,5],[25,5],[26,5],[[]],[[]],[[],[[10,[40]]]],[[],[[10,[7]]]],[[]],[[]],[[]],0,[72,[[55,[25]]]],[24,[[31,[25]]]],[24,[[31,[26]]]],[24,[[31,[5,30]]]],[[16,16],16],[51,23],[[44,33],34],[4,[[3,[20]]]],[14,[[3,[20]]]],[19,[[3,[20]]]],[17,[[55,[7]]]],[[68,5],[[55,[7]]]],[43,[[55,[7]]]],[[48,5],[[55,[7]]]],[20,[[55,[7]]]],[[4,[6,[5]]],[[55,[7]]]],[[],17],[60,17],[61,17],[62,17],[63,17],[64,17],[65,17],[66,17],[67,17],[49,17],[68,17],[69,17],[70,17],[43,17],[48,17],[20,17],[4,17],[14,[[55,[17]]]],[19,[[55,[17]]]],[9,[[55,[17]]]],[51,2],[51,2],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[15],[43,[[55,[7]]]],[48,7],[19,7],[[],17],[60,17],[61,17],[62,17],[63,17],[64,17],[65,17],[66,17],[67,17],[49,17],[68,17],[69,17],[70,17],[43,17],[48,17],[20,17],[4,17],[38,[[55,[23]]]],[4,[[55,[7]]]],[20,23],[21,39],[4,[[11,[[10,[7]]]]]],[51,2],[51,2],[4,[[3,[20]]]],0,0,0,[[16,16],16],0,0,[16,28],[17,52],[43,52],[20,52],[23],[16],[29],[38],[25],[26],[27],[5],[41],0,0,0,[64,64],[[[3,[20]],[55,[[3,[9]]]],[73,[43]],[73,[43]]],43],[33,74],0,0,[[17,7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[69,69],[[[3,[4]],11,11],43],0,0,[4,52],[4,52],[[20,7,7],52],[[[2,[1]]],52],[17,52],[16,52],[20,52],[[16,23],52],[[4,55],52],[4,52],[51,52],[43,52],[4,52],[33,52],[34,52],[16,52],[44,22],[[[2,[1]]],[[0,[36,22]]]],[51],[[[2,[1]]],22],[51],0,0,0,0,0,0,0,0,[[16,16],16],[[[2,[1]]],75],0,[[16,16],16],0,[[],23],[4,23],[4,23],[14,23],[14,23],[19,23],[19,23],[9,23],[9,23],[39,23],0,0,0,0,[[16,16],16],[[51,21],8],[[],23],[[],44],[[],47],[[[11,[[10,[7]]]],52,52,[55,[76]]],51],[[],15],[[23,38],4],[23,14],[[23,7],19],[47,55],[16,16],[8,8],0,[16,28],[[16,16],16],0,0,[62,62],[[[11,[43]]],43],[[[11,[48]],7],48],0,0,[20,52],[[23,23],[[55,[42]]]],[[16,16],[[55,[42]]]],[[29,29],[[55,[42]]]],[[[3,[20]]],16],0,0,0,[20,28],[4,77],0,[21,22],0,0,0,[[[2,[1]]],[[55,[[3,[1]]]]]],[17],[[14,5]],[[19,5]],[67,67],[[7,7,[73,[48]]],48],[39,[[31,[30]]]],[[[10,[40]],78],[[31,[[10,[7]],30]]]],[[[2,[1]]],7],[41,41],0,[60,60],[[[11,[43]]],43],[[[11,[48]],7],48],[[51,[2,[14]]]],[15],[[51,[2,[19]]]],0,0,[21,22],0,[48,48],[68,68],[[[3,[19]]],43],0,[65,65],[[[3,[20]],[73,[48]],[73,[48]],7],48],[70,70],[63,63],[61,61],0,0,0,0,0,[38,[[55,[28]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[12,28],[15,28],[[],28],[[],28],[[],28],[[],28],[[],28],[[17,24],28],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[24,[[31,[25]]]],[[],31],[24,[[31,[26]]]],[[],31],[[],31],[[],31],[[[11,[79]]],[[31,[17,30]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[4,[[55,[23]]]],[16],[32,3],[8,8],[66,66],[[[3,[20]],[55,[[3,[9]]]],[73,[43]]],43],0,0,[[13,75],81],[[4,75],81],[[9,75],81],[51,81],[[50,52],81],[[43,75],81],[[],81],[[14,75],81],[[39,75],81],[[48,75],81],[[19,75],81],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[82,[[83,[50]]]],0,0,0,[[]],[[]],[[]],[[84,3],[[55,[[3,[20]]]]]],[[84,23],[[55,[[3,[4]]]]]],[[]],[[85,86],84],[[84,43,85,85,85]],[[84,69,85]],[[84,48,85]],[[84,70]],[[],31],[[],31],[[],80]],"p":[[8,"GetName"],[3,"IdList"],[6,"RRC"],[3,"Cell"],[4,"Attribute"],[8,"Into"],[15,"u64"],[3,"Builder"],[3,"CombGroup"],[3,"PortDef"],[3,"Vec"],[3,"Nothing"],[3,"Assignment"],[3,"Group"],[3,"StaticTiming"],[4,"Guard"],[3,"Attributes"],[3,"GPosIdx"],[3,"StaticGroup"],[3,"Port"],[3,"LibrarySignatures"],[8,"Iterator"],[3,"Id"],[15,"str"],[4,"BoolAttr"],[4,"NumAttr"],[4,"InternalAttr"],[3,"String"],[3,"Canonical"],[3,"Error"],[4,"Result"],[3,"WRC"],[3,"GuardRef"],[4,"FlatGuard"],[4,"PortComp"],[8,"Clone"],[4,"PortParent"],[4,"CellType"],[3,"Primitive"],[4,"Width"],[4,"Direction"],[4,"Ordering"],[4,"Control"],[3,"GuardPool"],[3,"BackendConf"],[3,"Empty"],[3,"PortIterator"],[4,"StaticControl"],[3,"Enable"],[3,"Context"],[3,"Component"],[15,"bool"],[3,"GlobalSymbol"],[3,"PathBuf"],[4,"Option"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[6,"Result"],[3,"Seq"],[3,"StaticSeq"],[3,"Par"],[3,"StaticPar"],[3,"If"],[3,"StaticIf"],[3,"While"],[3,"StaticRepeat"],[3,"StaticEnable"],[3,"Invoke"],[3,"StaticInvoke"],[4,"GenericControl"],[15,"u8"],[3,"Box"],[15,"u32"],[15,"usize"],[3,"NonZeroU64"],[3,"SmallVec"],[3,"LinkedHashMap"],[3,"Global"],[3,"TypeId"],[6,"Result"],[3,"Workspace"],[6,"CalyxResult"],[3,"Rewriter"],[6,"RewriteMap"],[6,"PortRewriteMap"],[3,"Printer"],[3,"Cloner"],[8,"GetAttributes"],[13,"Bool"],[13,"Num"],[13,"Internal"],[13,"Unknown"],[13,"Primitive"],[13,"Component"],[13,"Constant"],[13,"Seq"],[13,"Par"],[13,"If"],[13,"While"],[13,"Invoke"],[13,"Enable"],[13,"Empty"],[13,"Static"],[13,"Or"],[13,"And"],[13,"Not"],[13,"CompOp"],[13,"Port"],[13,"Static"],[13,"Dynamic"],[13,"Or"],[13,"And"],[13,"Not"],[13,"CompOp"],[13,"Port"],[13,"Info"],[13,"Cell"],[13,"Group"],[13,"StaticGroup"],[13,"Repeat"],[13,"Enable"],[13,"Par"],[13,"Seq"],[13,"If"],[13,"Empty"],[13,"Invoke"],[13,"Const"],[13,"Param"]]},\
"calyx_opt":{"doc":"The Calyx Intermediate Language","t":[0,0,0,0,14,0,3,3,3,3,3,3,3,16,8,3,3,3,3,3,16,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,8,13,8,13,4,13,13,13,13,13,6,8,8,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12],"n":["analysis","default_passes","pass_manager","passes","register_alias","traversal","ControlId","ControlOrder","ControlPorts","DataflowOrder","DominatorMap","GraphAnalysis","GraphColoring","Info","IntoStatic","LiveRangeAnalysis","PortInterface","ReadWriteSet","ScheduleConflicts","ShareSet","StaticCon","StaticParTiming","VariableDetection","WithStatic","add","add_edges","add_static_enable_ids","add_static_enable_ids_static","all_conflicts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_greedy","comb_path_spec","comb_path_specs","component_name","compute_static","compute_unique_ids","conflicts_with","contains","control_port_read_write_set","control_port_read_write_set_static","dataflow_sort","default","default","default","default","default","default","edge_induced_subgraph","exits_map","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_context","get","get","get_all","get_all_bindings","get_bindings","get_control","get_control_nodes","get_guaranteed_attribute","get_guaranteed_attribute_static","get_guaranteed_enable_id","get_guaranteed_id","get_guaranteed_id_static","get_live_control_data","get_node_reads","get_share_freqs","get_static_control","get_total_order","has_cycles","has_nodes","insert_conflict","insert_conflicts","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_shareable_component","is_state_share","key_written_guaranteed","liveness_overlaps","make_static","map","must_write_set","new","new","new","new","new","paths","port_read_set","port_reads","port_write_set","ports","reaching_defns","read_set","reads_from","register_reads","remove","remove_isolated_vertices","static_par_domination","to_owned","to_owned","to_string","to_string","toposort","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_static","update_static","uses","variable_like","welsh_powell_coloring","write_set","write_together_specs","writes_to","DefSet","Group","GroupOrInvoke","Invoke","MetadataMap","ReachingDefinitionAnalysis","bitor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_overlap","clone","clone","clone_into","clone_into","cmp","default","default","default","eq","equivalent","fetch_label","fetch_label_static","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","hash","into","into","into","into","into","meta","new","partial_cmp","reach","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","PassClosure","PassManager","add_alias","borrow","borrow_mut","default","default_passes","execute_plan","from","into","register_pass","show_names","try_from","try_into","type_id","AttributePromotion","Canonicalize","CellShare","ClkInsertion","CollapseControl","CombProp","CompileEmpty","CompileInvoke","CompileRef","CompileStatic","CompileSync","CompileSyncWithoutSyncReg","ComponentInliner","DataPathInfer","DeadAssignmentRemoval","DeadCellRemoval","DeadGroupRemoval","DiscoverExternal","Externalize","GoInsertion","GroupToInvoke","GroupToSeq","HoleInliner","InferShare","LowerGuards","MergeAssign","Papercut","ParToSeq","RegisterUnsharing","RemoveIds","ResetInsertion","SimplifyStaticGuards","SimplifyWithControl","StaticInliner","StaticPromotion","SynthesisPapercut","TopDownCompileControl","TopDownStaticTiming","UnrollBounded","WellFormed","WireInliner","WrapMain","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","clear_data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","description","empty","enable","enable","enable","enable","enable","enable","enable","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish_if","finish_if","finish_if","finish_if","finish_if","finish_if","finish_par","finish_par","finish_par","finish_par","finish_par","finish_par","finish_par","finish_seq","finish_seq","finish_seq","finish_static_par","finish_static_repeat","finish_static_seq","finish_while","finish_while","finish_while","finish_while","finish_while","finish_while","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke","invoke","invoke","invoke","invoke","invoke","invoke","invoke","iteration_order","iteration_order","iteration_order","iteration_order","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","opts","opts","opts","opts","opts","precondition","precondition","separate_anded_intervals","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start_context","start_if","start_if","start_if","start_if","start_static_control","start_static_control","start_static_if","start_while","start_while","start_while","start_while","start_while","start_while","static_enable","static_enable","static_invoke","static_invoke","static_invoke","static_invoke","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Action","Change","CompTraversal","ConstructVisitor","Continue","Named","No","Order","Post","Pre","SkipChildren","StaticChange","Stop","VisResult","Visitable","Visitor","apply_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change","clear_data","default","description","do_pass","do_pass","do_pass_default","do_pass_default","empty","empty","enable","enable","eq","equivalent","finish","finish","finish_context","finish_context","finish_if","finish_if","finish_par","finish_par","finish_seq","finish_seq","finish_static_control","finish_static_control","finish_static_if","finish_static_if","finish_static_par","finish_static_par","finish_static_repeat","finish_static_repeat","finish_static_seq","finish_static_seq","finish_while","finish_while","from","from","from","from","get_opts","get_opts","into","into","into","invoke","invoke","iteration_order","iteration_order","name","new","opts","opts","precondition","precondition","start","start","start_context","start_context","start_if","start_if","start_par","start_par","start_seq","start_seq","start_static_control","start_static_control","start_static_if","start_static_if","start_static_par","start_static_par","start_static_repeat","start_static_repeat","start_static_seq","start_static_seq","start_while","start_while","static_change","static_enable","static_enable","static_invoke","static_invoke","take","traverse_component","traverse_component","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","visit","0","0"],"q":["calyx_opt","","","","","","calyx_opt::analysiscalyx_opt::analysis::reaching_defns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx_opt::analysis::reaching_defns::GroupOrInvoke","","calyx_opt::pass_manager","","","","","","","","","","","","","","","calyx_opt::passescalyx_opt::traversal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","calyx_opt::traversal::Action",""],"d":["Analysis for Calyx programs.","Defines the default passes available to PassManager.","Define the PassManager structure that is used to construct …","Passes for the Calyx compiler.","Simple macro to register an alias with a pass manager.","Helpers for traversing Control programs","Adding “NODE_ID”, “BEGIN_ID”, and “END_ID” …","Extract the dependency order of a list of control programs.","Contains a mapping from name of ir::CombGroup to the ports …","Given a set of assignment, generates an ordering that …","Builds a Domination Map for the control program. It maps …","Constructs a graph based representation of a component. …","Defines a greedy graph coloring algorithm over a generic …","Extra information needed to compute static information for …","","This analysis implements a parallel version of a classic …","Helper methods to parse <code>@read_together</code> and <code>@write_together</code> …","Calcuate the reads-from and writes-to set for a given set …","A conflict graph that describes which nodes (i.e. …","Stores a Hashset that contains the type names of all …","","Calculate live ranges across static par blocks. Assumes …","Detects if a group is solely being used to update a …","Trait to propagate and extra “static” attributes …","Adds id to self","Add each edge in <code>edges</code> to the graph.","","","Returns an iterator containing all conflict edges, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given an <code>ordering</code> of <code>T</code>s, find a mapping from nodes to <code>T</code>s …","Construct <code>@read_together</code> spec from the definition of a …","Construct @read_together specs from the primitive …","","Compute the static information for the type if possible …","Adds the @NODE_ID attribute to all control stmts except …","Return a vector of all nodes that conflict with this nodes.","Checks if id contains self","Returns the ports that are read by the given control …","Returns the ports that are read by the given control …","","","","","","","","Restricts the analysis graph to only include edges that …","Maps ids of control stmts, to the “last” nodes in …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a shareset from the context. Looks for “…","Return a reference to the port reads associated with the …","Look up the set of things live at a node (i.e. group or …","Get a unique list of all live cells in <code>component</code>.","Return the entire invoke binding map.","Get all bindings for an instance","Given a control c and an id, finds the control statement …","","","","","","","Updates live_once_map and par_thread_map. live_once_map …","","provides a hashmap that gives the sharing frequencies","","Return a total order for the control programs. Returns an …","Checks if there are cycles in the analysis graph.","","Add a conflict edge between <code>a</code> and <code>b</code>.","Add conflict edges between all given items.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Given a set of shareable and a cell, determines whether …","Returns whether or not this instance is state_share","","<code>par_id</code> is the id of a par thread. <code>thread_a</code> and <code>thread_b</code> …","","Map from node (either invokes, enables, or if/while ports) …","Return the name of the cells that these assignments write …","","Construct a domination map.","Construct a live range analysis.","","Construct a live range analysis.","Return a Vec of paths from <code>start</code> to <code>finish</code>, each path a …","Returns ir::Port which are read from in the assignments.","Returns ir::Port that are read from in the given …","Returns ir::Port which are written to in the assignments.","Returns all the <code>Port</code> associated with this instance.","Calculate the reaching definitions in a control program.","Returns ir::Cell which are read from in the assignments. …","Returns an iterator over all the reads from a port. …","Returns the register cells whose out port is read anywhere …","Remove the port reads associated with the group.","Remove all vertices that have no undirected neighbors from …","an analysis to help domination across static pars static …","","","","","Return a topological sort of this graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the static information for the type if possible …","Compute the static information for the type if possible …","Returns all uses of cells in this group. Uses constitute …","A group is variable like if it:","","Returns ir::Cell which are written to by the assignments. …","Construct @write_together specs from the primitive …","Returns an iterator over all the writes to this port. …","A datastructure used to represent a set of …","","A wrapper enum to distinguish between Ids that come from …","","","A struct used to compute a reaching definition analysis. …","","","","","","","","","","Provides a map containing a vector of sets for each …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Constructs a reaching definition analysis for registers …","","","","","","","","","","","","","","","","","","","Top-level type for all passes that transform an ir::Context","Structure that tracks all registered passes for the …","Adds a new alias for groups of passes. An alias is a list …","","","","","Executes a given “plan” constructed using the incl and …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Register a new Calyx pass and return an error if another …","Return a string representation to show all available …","","","","Removes NODE_ID, BEGIN_ID, and END_ID from each control …","Perform serval canonicalizations on the program.","Given a LiveRangeAnalysis that specifies the “share” …","Adds assignments from a components <code>clk</code> port to every …","Collapses and de-nests control constructs.","Propagate unconditional reads and writes from wires.","Compiles away all <code>ir::Empty</code> statements into an <code>ir::Enable</code>.","Compiles <code>ir::Invoke</code> statements into an <code>ir::Enable</code> that …","","Compiles Static Islands","loop through all control statements under “par” block …","Compiles @sync without use of std_sync_reg Upon …","Inlines all sub-components marked with the <code>@inline</code> …","Infers <code>@control</code> and <code>@data</code> annotations for cells. A cell …","Removes unused assigns from groups. Analyzes the writes to …","Removes unused cells from components.","Removes unused groups and combinational groups from …","A pass to detect cells that have been inlined into the …","Externalize input/output ports for cells marked with the …","Add the group’s <code>go</code> signal into the guards of all …","Transform groups that are structurally invoking components …","Transforms a group into a seq of 2 smaller groups, if …","Removes all groups and inlines reads and writes from holes.","This pass checks if components are (state) shareable. Here …","Lowers guards into a purely structural representation. …","Merge assignments of the form with the same (dst_port, …","Pass to check for common errors such as missing …","Transforms all <code>par</code> into <code>seq</code>. Uses analysis::ControlOrder …","Unsharing registers reduces the amount of multiplexers …","Removes NODE_ID, BEGIN_ID, and END_ID from each control …","Adds assignments from a components <code>reset</code> port to every …","Simplifies Static Guards In particular if g = g1 &amp; g2 &amp; ……","Transforms combinational groups into normal groups by …","","Infer “promote_static” annotation for groups and …","Pass to check common synthesis issues.","<strong>Core lowering pass.</strong> Compiles away the control programs in …","<strong>Core Lowering Pass</strong>: Generates latency-sensitive FSMs when …","Fully unroll all <code>while</code> loops with a given <code>@bound</code>.","Pass to check if the program is well-formed.","Alternate hole inliner that removes groups and group holes …","If the top-level component is not named <code>main</code>, adds a new …ransforms a <code>if-with</code> into a <code>seq-if</code> which first runs the …","","Compile each child in <code>par</code> block separately so each child …","","Collapse par { par { A }; B } into par { A; B }.","Collapse par { par { A }; B } into par { A; B }.","","","","","Collapse seq { seq { A }; B } into seq { A; B }.","Collapse static par {static par {A; B;}} into static par …","Collapse","Collase static seq {static seq {A; B; }} into static seq …","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","takes in g, and separates the “anded intervals” from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Executed after visiting the children of a [ir::Static] …","Executed after visiting the children of a [ir::Static] …","","","","","if while body is static, then we want to make sure that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Action performed at the end of visiting a control …","Replace the current ast node with a new node. If performed …","Define traversal order of components: pre-order, …","Trait defining method that can be used to construct a …","Continue traversal of control program.","Trait that describes named things. Calling <code>do_pass</code> and …","Use an arbitrary order.","The order in which the components are traversed.","Traverse components in post-order.","Traverse components in pre-order.","Skips the traversal of this node’s children but …","Replace the current StaticControl node with a new node If …","Globally abort traversal of control program.","Result of performing a visit.","Describes types that can be visited by things implementing …","The visiting interface for a <code>ir::Control</code> program. Contains …","Traverses components in post-order and applies <code>upd</code>.","","","","","","","","Clear the data stored in the visitor. Called before …","","A short description of the pass.","Run the visitor on a given program <code>ir::Context</code>. The …","Run the visitor on a given program <code>ir::Context</code>. The …","Build a Default implementation of this pass and call …","Build a Default implementation of this pass and call …","Executed at an ir::Empty node.","Executed at an ir::Empty node.","Executed at an ir::Enable node.","Executed at an ir::Enable node.","","","Executed after the traversal ends. This method is always …","Executed after the traversal ends. This method is always …","Transform the <code>ir::Context</code> after visiting the components.","Transform the <code>ir::Context</code> after visiting the components.","Executed after visiting the children of a ir::If node.","Executed after visiting the children of a ir::If node.","Executed after visiting the children of a ir::Par node.","Executed after visiting the children of a ir::Par node.","Executed after visiting the children of a ir::Seq node.","Executed after visiting the children of a ir::Seq node.","Executed after visiting the conetnts of an …","Executed after visiting the conetnts of an …","Executed after visiting the children of a ir::StaticIf …","Executed after visiting the children of a ir::StaticIf …","","","Executed after visiting the children of a ir::StaticRepeat …","Executed after visiting the children of a ir::StaticRepeat …","","","Executed after visiting the children of a ir::While node.","Executed after visiting the children of a ir::While node.","Construct the visitor using information from the Context","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Executed at an ir::Invoke node.","Executed at an ir::Invoke node.","Define the iteration order in which components should be …","Define the iteration order in which components should be …","The name of a pass. Is used for identifying passes.","Returns a new instance the PostOrder iterator given a …","Set of options that can be passed to the pass. The options …","Set of options that can be passed to the pass. The options …","Precondition for this pass to run on the program. If this …","Precondition for this pass to run on the program. If this …","Executed before the traversal begins.","Executed before the traversal begins.","Transform the <code>ir::Context</code> before visiting the components.","Transform the <code>ir::Context</code> before visiting the components.","Executed before visiting the children of a ir::If node.","Executed before visiting the children of a ir::If node.","Executed before visiting the children of a ir::Par node.","Executed before visiting the children of a ir::Par node.","Executed before visiting the children of a ir::Seq node.","Executed before visiting the children of a ir::Seq node.","Executed before visiting the contents of an …","Executed before visiting the contents of an …","Executed before visiting the children of a ir::StaticIf …","Executed before visiting the children of a ir::StaticIf …","","","Executed before visiting the children of a ir::StaticRepeat…","Executed before visiting the children of a ir::StaticRepeat…","","","Executed before visiting the children of a ir::While node.","Executed before visiting the children of a ir::While node.","","Executed at an ir::StaticEnable node.","Executed at an ir::StaticEnable node.","Executed at a ir::StaticInvoke node.","Executed at a ir::StaticInvoke node.","Returns the underlying component vector in original order.","Define the traversal over a component. Calls Visitor::start…","Define the traversal over a component. Calls Visitor::start…","","","","","","","","","","Perform the traversal.","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,114,0,0,0,1,3,115,115,7,115,116,25,18,9,117,118,119,20,3,21,7,1,22,115,116,25,18,9,117,118,119,20,3,21,7,1,22,3,1,3,1,9,117,117,20,113,115,7,1,118,118,18,20,3,21,7,1,22,3,20,20,3,21,22,115,116,25,25,18,9,9,117,118,119,20,3,3,3,21,7,7,1,22,1,25,21,21,25,25,20,20,115,115,115,115,115,21,20,9,20,116,3,9,9,9,115,116,25,18,9,117,118,119,20,3,21,7,1,22,1,1,20,22,114,20,118,18,20,21,1,22,3,118,118,118,3,0,118,3,118,25,3,20,3,1,9,3,3,115,116,25,18,9,117,118,119,20,3,21,7,1,22,115,116,25,18,9,117,118,119,20,3,21,7,1,22,115,116,25,18,9,117,118,119,20,3,21,7,1,22,113,113,118,119,9,118,117,3,0,46,0,46,0,0,42,46,48,42,43,46,48,42,43,43,46,42,46,42,46,48,42,43,46,46,48,48,46,48,42,43,46,48,42,43,46,46,46,46,48,42,43,43,43,46,43,46,42,46,48,42,43,46,48,42,43,46,48,42,43,120,121,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,70,58,61,65,67,73,75,77,61,63,64,65,70,72,74,75,89,90,61,63,65,75,89,90,61,63,64,69,81,87,88,61,63,69,69,69,69,61,63,65,75,89,90,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,66,63,63,64,64,65,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,55,56,61,65,71,74,75,82,55,56,59,61,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,54,56,59,63,64,64,93,85,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,72,76,77,78,79,80,82,83,84,85,90,92,93,56,60,65,74,72,86,65,56,60,65,72,74,91,65,75,55,65,71,82,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,52,53,54,55,56,57,58,59,60,61,62,66,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,0,111,0,0,111,0,106,0,106,106,111,111,111,0,0,0,110,111,110,106,111,110,106,111,122,106,123,112,112,112,112,112,112,112,112,106,106,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,122,111,110,106,122,122,111,110,106,112,112,112,112,123,110,123,123,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,111,112,112,112,112,110,112,112,111,110,106,111,110,106,111,110,106,124,125,126],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[3,3],[[4,5],5],[[6,5],5],[7,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[1,1],[[]],[[]],[[9,[11,[10]]],12],[13,[[15,[14]]]],[8,[[15,[[12,[2,14]]]]]],0,[[],[[11,[5]]]],[[4,5,16],5],[[7,2],[[17,[2]]]],[[1,2],16],[4],[6],[[18,[14,[19]]],[[15,[[14,[19]]]]]],[[],20],[[],3],[[],21],[[],7],[[],1],[[],22],[3,3],0,[[20,23],24],[[3,23],24],[[21,23],24],[[22,23],24],[[]],[[]],[[]],[4,25],[[]],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[26,3],[27,3],[[]],[4,7],[[]],[[]],[[]],[28,1],[[25,2],[[11,[14]]]],[[21,5],12],[21,8],[25,[[12,[2,[14,[14]]]]]],[[25,2],[[11,[14]]]],[[5,4],[[11,[29]]]],[[17,4]],[4,5],[6,5],[30,5],[4,5],[6,5],[[21,12,12,12,17,4]],[[5,26,1],[[17,[2]]]],[9,[[12,[10,10]]]],[[5,6],[[11,[29]]]],[8,[[15,[[14,[4]]]]]],[3,16],[9,16],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,31],16],[1,16],[[2,17,26],16],[[22,5,5,5,2,2],16],[[],11],0,[8,8],[8,[[15,[18]]]],[[4,2],20],[[4,1,1],21],[[[17,[2]],16],1],[[4,2,21],22],[[3,32,32],[[14,[[14,[[31,[32]]]]]]]],[8,8],[19,8],[8,8],[3,[[14,[[31,[32]]]]]],0,[8,8],[[3,32],33],[[[0,[8,34]]],8],[[25,2],[[11,[[14,[[31,[32]]]]]]]],[3,3],0,[[]],[[]],[[[9,[[0,[35,36,37,34,38]]]]],39],[3,39],[3,33],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],[[11,[5]]]],[[],[[11,[5]]]],[[[0,[8,34]]],8],[[31,1],11],[9,12],[8,8],[8,[[12,[2,[14,[[17,[2]]]]]]]],[[3,32],33],0,0,0,0,0,0,[[42,42]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[45,[2,[14,[44]]]]]],[46,46],[42,42],[[]],[[]],[[46,46],47],[[],48],[[],42],[[],43],[[46,46],16],[[],16],[[48,49],[[11,[2]]]],[[48,50],[[11,[2]]]],[[46,23],24],[[48,23],24],[[42,23],24],[[43,23],24],[[]],[[]],[[]],[[]],[[],5],[46],[46,2],[[]],[[]],[[]],[[]],0,[4,43],[[46,46],[[11,[47]]]],0,[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],41],[[],41],[[],41],[[],41],0,0,0,0,[[51,39,[14,[39]]],15],[[]],[[]],[[],51],[[],[[15,[51]]]],[[51,28,16],15],[[]],[[]],[51,15],[51,39],[[],40],[[],40],[[],41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[[],66],[[],67],[[],68],[[],69],[[],70],[[],71],[[],72],[[],73],[[],74],[[],75],[[],76],[[],77],[[],78],[[],79],[[],80],[[],81],[[],82],[[],83],[[],84],[[],85],[[],86],[[],87],[[],88],[[],89],[[],90],[[],91],[[],92],[[],93],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[70,95,26,96],97],[[58,98,26,96],97],[[61,98,26,96],97],[[65,98,26,96],97],[[67,98,26,96],97],[[73,98,26,96],97],[[75,98,26,96],97],[[77,98,26,96],97],[[61,26,96],97],[[63,26,96],97],[[64,26,96],97],[[65,26,96],97],[[70,26,96],97],[[72,26,96],97],[[74,26,96],97],[[75,26,96],97],[[89,26,96],97],[[90,26,96],97],[[61,99,26,96],97],[[63,99,26,96],97],[[65,99,26,96],97],[[75,99,26,96],97],[[89,99,26,96],97],[[90,99,26,96],97],[[61,100,26,96],97],[[63,100,26,96],97],[[64,100,26,96],97],[[69,100,26,96],97],[[81,100,26,96],97],[[87,100,26,96],97],[[88,100,26,96],97],[[61,101,26,96],97],[[63,101,26,96],97],[[69,101,26,96],97],[[69,102,26,96],97],[[69,103,26,96],97],[[69,104,26,96],97],[[61,105,26,96],97],[[63,105,26,96],97],[[65,105,26,96],97],[[75,105,26,96],97],[[89,105,26,96],97],[[90,105,26,96],97],[28,[[15,[52]]]],[[]],[28,[[15,[53]]]],[[]],[[]],[28,[[15,[54]]]],[[]],[28,[[15,[55]]]],[28,[[15,[56]]]],[[]],[28,[[15,[57]]]],[[]],[[]],[28,[[15,[58]]]],[[]],[28,[[15,[59]]]],[[]],[28,[[15,[60]]]],[28,[[15,[61]]]],[[]],[28,[[15,[62]]]],[[]],[[]],[28,[[15,[63]]]],[[]],[28,[[15,[64]]]],[[]],[[]],[28,[[15,[65]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[55,49,26,96],97],[[56,49,26,96],97],[[61,49,26,96],97],[[65,49,26,96],97],[[71,49,26,96],97],[[74,49,26,96],97],[[75,49,26,96],97],[[82,49,26,96],97],[[],106],[[],106],[[],106],[[],106],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[[]],[[]],[[]],[[]],[28,[[11,[39]]]],[28,[[11,[39]]]],[[[108,[107]],14],[[11,[[108,[107]]]]]],[[52,26,96],97],[[53,26,96],97],[[54,26,96],97],[[55,26,96],97],[[56,26,96],97],[[57,26,96],97],[[58,26,96],97],[[59,26,96],97],[[60,26,96],97],[[61,26,96],97],[[62,26,96],97],[[66,26,96],97],[[63,26,96],97],[[64,26,96],97],[[65,26,96],97],[[67,26,96],97],[[68,26,96],97],[[72,26,96],97],[[76,26,96],97],[[77,26,96],97],[[78,26,96],97],[[79,26,96],97],[[80,26,96],97],[[82,26,96],97],[[83,26,96],97],[[84,26,96],97],[[85,26,96],97],[[90,26,96],97],[[92,26,96],97],[[93,28],97],[[56,99,26,96],97],[[60,99,26,96],97],[[65,99,26,96],97],[[74,99,26,96],97],[[72,6,26,96],97],[[86,6,26,96],97],[[65,109,26,96],97],[[56,105,26,96],97],[[60,105,26,96],97],[[65,105,26,96],97],[[72,105,26,96],97],[[74,105,26,96],97],[[91,105,26,96],97],[[65,30,26,96],97],[[75,30,26,96],97],[[55,50,26,96],97],[[65,50,26,96],97],[[71,50,26,96],97],[[82,50,26,96],97],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[110,15],[[]],[[]],[[]],[[]],[[]],[[]],[4,111],[[]],[[],106],[[],94],[28,15],[28,15],[28,15],[28,15],[[95,26,96],97],[[95,26,96],97],[[98,26,96],97],[[98,26,96],97],[[106,106],16],[[],16],[[26,96],97],[[26,96],97],[28,97],[28,97],[[99,26,96],97],[[99,26,96],97],[[100,26,96],97],[[100,26,96],97],[[101,26,96],97],[[101,26,96],97],[[6,26,96],97],[[6,26,96],97],[[109,26,96],97],[[109,26,96],97],[[102,26,96],97],[[102,26,96],97],[[103,26,96],97],[[103,26,96],97],[[104,26,96],97],[[104,26,96],97],[[105,26,96],97],[[105,26,96],97],[28,15],[[]],[[]],[[]],[28,[[14,[16]]]],[28,[[14,[16]]]],[[]],[[]],[[]],[[49,26,96],97],[[49,26,96],97],[[],106],[[],106],[[],94],[[[14,[26]],106],110],[[]],[[]],[28,[[11,[39]]]],[28,[[11,[39]]]],[[26,96],97],[[26,96],97],[28,97],[28,97],[[99,26,96],97],[[99,26,96],97],[[100,26,96],97],[[100,26,96],97],[[101,26,96],97],[[101,26,96],97],[[6,26,96],97],[[6,26,96],97],[[109,26,96],97],[[109,26,96],97],[[102,26,96],97],[[102,26,96],97],[[103,26,96],97],[[103,26,96],97],[[104,26,96],97],[[104,26,96],97],[[105,26,96],97],[[105,26,96],97],[6,111],[[30,26,96],97],[[30,26,96],97],[[50,26,96],97],[[50,26,96],97],[110,[[14,[26]]]],[[26,96],15],[[26,96],15],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],41],[[],41],[[],41],[[112,26,96],97],0,0],"p":[[3,"ShareSet"],[3,"Id"],[3,"GraphAnalysis"],[4,"Control"],[15,"u64"],[4,"StaticControl"],[3,"ScheduleConflicts"],[8,"Iterator"],[3,"GraphColoring"],[15,"i64"],[4,"Option"],[3,"HashMap"],[3,"Primitive"],[3,"Vec"],[6,"CalyxResult"],[15,"bool"],[3,"HashSet"],[3,"DataflowOrder"],[3,"Assignment"],[3,"DominatorMap"],[3,"LiveRangeAnalysis"],[3,"StaticParTiming"],[3,"Formatter"],[6,"Result"],[3,"ControlPorts"],[3,"Component"],[3,"Group"],[3,"Context"],[4,"GenericControl"],[3,"StaticEnable"],[6,"RRC"],[3,"Port"],[3,"PortIterator"],[8,"Clone"],[8,"Eq"],[8,"Hash"],[8,"ToString"],[8,"Ord"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"DefSet"],[3,"ReachingDefinitionAnalysis"],[3,"BTreeSet"],[3,"BTreeMap"],[4,"GroupOrInvoke"],[4,"Ordering"],[3,"MetadataMap"],[3,"Invoke"],[3,"StaticInvoke"],[3,"PassManager"],[3,"Canonicalize"],[3,"CellShare"],[3,"CombProp"],[3,"CompileRef"],[3,"ComponentInliner"],[3,"Externalize"],[3,"GroupToInvoke"],[3,"InferShare"],[3,"Papercut"],[3,"StaticPromotion"],[3,"DiscoverExternal"],[3,"TopDownCompileControl"],[3,"TopDownStaticTiming"],[3,"WellFormed"],[3,"SynthesisPapercut"],[3,"AttributePromotion"],[3,"ClkInsertion"],[3,"CollapseControl"],[3,"CompileEmpty"],[3,"CompileInvoke"],[3,"CompileStatic"],[3,"DeadAssignmentRemoval"],[3,"DeadCellRemoval"],[3,"DeadGroupRemoval"],[3,"GoInsertion"],[3,"GroupToSeq"],[3,"HoleInliner"],[3,"LowerGuards"],[3,"MergeAssign"],[3,"ParToSeq"],[3,"RegisterUnsharing"],[3,"RemoveIds"],[3,"ResetInsertion"],[3,"SimplifyStaticGuards"],[3,"StaticInliner"],[3,"CompileSync"],[3,"CompileSyncWithoutSyncReg"],[3,"DataPathInfer"],[3,"SimplifyWithControl"],[3,"UnrollBounded"],[3,"WireInliner"],[3,"WrapMain"],[15,"str"],[3,"Empty"],[3,"LibrarySignatures"],[6,"VisResult"],[3,"Enable"],[3,"If"],[3,"Par"],[3,"Seq"],[3,"StaticPar"],[3,"StaticRepeat"],[3,"StaticSeq"],[3,"While"],[4,"Order"],[3,"StaticTiming"],[4,"Guard"],[3,"StaticIf"],[3,"CompTraversal"],[4,"Action"],[8,"Visitor"],[8,"WithStatic"],[8,"IntoStatic"],[3,"ControlId"],[3,"ControlOrder"],[3,"PortInterface"],[3,"ReadWriteSet"],[3,"VariableDetection"],[13,"Group"],[13,"Invoke"],[8,"ConstructVisitor"],[8,"Named"],[8,"Visitable"],[13,"Change"],[13,"StaticChange"]]},\
"calyx_utils":{"doc":"Shared utilities for the Calyx compiler.","t":[12,3,6,3,13,3,3,6,8,3,3,6,3,4,3,3,13,18,18,3,8,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["0","BoolIdx","CalyxResult","Error","File","FileIdx","GPosIdx","GSym","GetName","GlobalPositionTable","Id","Idx","NameGenerator","OutputFile","PosIdx","PositionTable","Stdout","UNKNOWN","UNKNOWN","WeightGraph","WithPos","add_all_edges","add_edge","add_file","add_names","add_node","add_pos","already_bound","as_mut","as_path_string","as_ref","as_ref","bits_needed_for","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_node","copy_span","default","default","default","default","default","degree","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","gen_name","get_hash","get_source","get_write","graph","hash","id","index_map","into","into","into","into","into","into","into","into","into","into","into","into_option","invalid_file","is_zero","isatty","malformed_control","malformed_structure","misc","name","new","new","nodes","papercut","partial_cmp","pass_assumption","reserved_name","reverse_index","show","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undefined","unused","with_pos","with_post_msg","with_prev_defined_names","write_error","zero","0"],"q":["calyx_utilscalyx_utils::OutputFile"],"d":["","Edge weight used for the graph nodes","Convience wrapper to represent success or meaningul …","Errors generated by the compiler","","Handle to a file in a PositionTable The index refers to …","A position index backed by a global PositionTable","","A trait representing something in the IR that has a name.","The global position table","Represents an identifier in a Calyx program","Index into a WeightGraph","Simple HashMap-based name generator that generates new …","Possible choices for output streams. Used by the <code>-o</code> option …","Handle to a position in a PositionTable The index refers …","Source position information for a Calyx program.","","The unknown position","Symbol for the unknown position","Weight graph provides a wrapper over a Graph that allows …","An IR node that may contain position information.","Add edges between all given items.","Add an edge between <code>a</code> and <code>b</code>.","Add a new file to the position table","Add generated names","Add a new node to the graph. Client code should ensure …","Add a new position to the position table","","Return reference to a global PositionTable","","Return an immutable reference to the global position table","","Number of bits needed to represent a number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the node has already been added to the graph.","Copy the span associated with this node.","","","","","","Return the degree of a given node (number of edges …","","","","","","","","","","","","","","","","","","","","","Format this position with a the error message <code>err_msg</code>","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a new String that starts with <code>prefix</code>. For example:","","","","Graph representating using identifier.","","","Mapping from T to a unique identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the position into an optional. Returns <code>None</code> if the …","","","","","","","Return a reference to the object’s name","Create a new position table where the first file and first …","","Returns an iterator over references to nodes in the Graph.","","","","","Returns a Map from <code>NodeIndex</code> to <code>T</code> (the reverse of the …","Visualizes the span without any message or mkaring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a NameGenerator where <code>names</code> are already defined so …","","",""],"i":[14,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,11,2,14,0,0,1,1,2,5,1,2,10,38,11,38,6,0,10,2,38,29,1,6,5,11,9,4,14,10,2,38,29,1,6,5,11,9,4,14,6,5,9,4,14,6,5,9,4,14,6,1,39,2,1,6,11,14,1,6,6,6,6,6,6,9,4,14,6,9,4,14,10,6,6,5,11,9,14,14,10,10,10,21,21,2,38,29,29,1,1,6,6,6,5,11,9,4,14,11,5,6,2,11,1,6,6,1,10,2,38,29,1,6,5,11,9,4,14,14,10,29,11,10,10,10,40,2,6,1,10,6,10,10,1,14,6,5,9,4,14,1,6,11,10,2,38,29,1,6,5,11,9,4,14,10,2,38,29,1,6,5,11,9,4,14,10,2,38,29,1,6,5,11,9,4,14,10,10,10,10,5,10,29,41],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[2,3,3],4],[[5,[7,[6]]]],[1],[[2,4,8,8],9],[[6,3],10],[[],2],[11,3],[[],2],[6,12],[13,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[5,5],[9,9],[4,4],[14,14],[[]],[[]],[[]],[[]],[[]],[[6,6],15],[1,16],[[],14],[[],2],[[],[[1,[[0,[17,18,19,20]]]]]],[[],6],[[],11],[[],14],[1,8],[[6,12],16],[[6,21],16],[[6,6],16],[[6,6],16],[[6,3],16],[[6,12],16],[[9,9],16],[[4,4],16],[[14,14],16],[[],16],[[],16],[[],16],[[],16],[[10,22],23],[[6,22],23],[[6,22],[[25,[24]]]],[[5,22],23],[[11,22],23],[[9,22],23],[[14,22],23],[[14,[26,[12]]],3],[27,10],[28,10],[[]],[6,21],[6,21],[[]],[[]],[16,29],[[]],[[]],[[],1],[[]],[3,6],[12,6],[[]],[[]],[[]],[[]],[[]],[12,[[25,[11]]]],[5,6],[[],13],[[2,4],12],[11,[[31,[30]]]],0,[6],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,[[32,[14]]]],[3,10],[29,16],[11,16],[3,10],[33,10],[3,10],[[],6],[[],2],[33,6],[1,34],[3,10],[[6,6],[[32,[15]]]],[[33,33],10],[6,10],[1,[[36,[35]]]],[14,3],[[]],[[]],[[]],[[]],[[]],[[[1,[[0,[17,18,33,19,20]]]]],3],[[],3],[11,3],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[6,3],10],[[6,33],10],[10,10],[[10,[32,[3]]],10],[[[7,[6]]],5],[3,10],[[],29],0],"p":[[3,"WeightGraph"],[3,"PositionTable"],[3,"String"],[3,"FileIdx"],[3,"NameGenerator"],[3,"Id"],[3,"HashSet"],[15,"usize"],[3,"PosIdx"],[3,"Error"],[4,"OutputFile"],[15,"str"],[15,"u64"],[3,"GPosIdx"],[4,"Ordering"],[15,"bool"],[8,"Eq"],[8,"Hash"],[8,"Clone"],[8,"Ord"],[6,"GSym"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"AsRef"],[3,"Utf8Error"],[3,"Error"],[3,"BoolIdx"],[8,"Write"],[3,"Box"],[4,"Option"],[8,"ToString"],[8,"Iterator"],[6,"NodeIndex"],[3,"HashMap"],[3,"TypeId"],[3,"GlobalPositionTable"],[8,"WithPos"],[8,"GetName"],[13,"File"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
