searchState.loadedDescShard("calyx_ir", 0, "Internal representation for the Calyx compiler.\nRepresents <code>c1 &amp;&amp; c2</code>.\nRepresents a guarded assignment in the program\nDefines the known attributes that can be attached to IR …\nAttributes associated with a specific IR structure.\nConfiguration information for the backends.\nAlias for bindings\nAttributes that are only allowed to take boolean values.\nThe bound of a while loop\nIR builder. Uses internal references to the component to …\nCanonical name of a Port\nRepresents an instantiated cell.\nThe type for a Cell\nClk for the signal\nImplement cloning operations on control statements. We …\nA combinational group. A combinational group does not have …\nComparison operator.\nsuggest that the current static seq block is compactable\nIn memory representation of a Component.\nCell constructed using a Calyx component\nThe width is a constant.\nCell representing a Constant\nThe IR Context that represents an entire Calyx program …\nControl AST nodes.\nThis is a control path instance\nAttributes that have been deprecated.\nThis is a data path instance\nDirection of a port on a cell.\nData for the <code>empty</code> control statement.\nControl statement that does nothing.\nData for the <code>enable</code> control statement.\nRuns the control for a list of subcomponents.\np1 == p2\nAn extern block that defines multiple primitives\nCell should be externalized\nProtects a cell controlling an FSM from being removed\nData for the <code>enable</code> control statement.\nRuns the FSM to conditionally transition\nhttps://github.com/calyxir/calyx/issues/1828\nIR Node was generated by the compiler\nEither holds a reference to a StaticControl, reference to …\np1 &gt;= p2\nStructs that can return an <code>Attributes</code> instance.\nA trait representing something in the IR that has a name.\nA Group of assignments that perform a logical action.\np1 &gt; p2\nAn assignment guard which has pointers to the various …\nA <code>GuardPool</code> is an “arena”-style storage area for …\nRepresents an identifier in a Calyx program\nA wrapper struct exposing an ordered collection of named …\nData for the <code>if</code> control statement.\nStandard imperative if statement\nOther types of information.\nInline this subcomponent\nAn inline primitive\nInput-Output “port”. Should only be used by holes.\nInput port.\nInternal attributes that cannot be parsed back from the IL.\nPlaced on @go ports of components to denote the II of a …\nData for an <code>invoke</code> control statement.\nInvoke a sub-component with the given port assignments\np1 &lt;= p2\nA representation of all the primitive definitions found …\np1 &lt; p2\np1 != p2\nGenerate a new FSM for this control node\nThe component doesn’t have a standard interface\nRepresents <code>!c1</code>\nAttributes that can take numeric values\nGenerate a one-hot FSM for this control node. (Not …\nIndicates that a StaticEnable should be allocated only one …\nRepresents <code>c1 || c2</code>.\nOutput port.\nData for the <code>par</code> control statement.\nRepresents parallel composition of control statements.\nDenotes a group that was generated from a <code>staticpar</code> during …\nThe width is a parameter.\nRepresents a port on a cell.\nUses the value on a port as the condition. Same as …\nComparison operations that can be performed between ports …\nDefinition of a port parameterized by a width type. Ports …\nWraps generic iterators over ports to allow functions to …\nPorts can come from Cells or Groups\nRepresentation of a external primitive definition.\nCell constructed using a primitive definition\nTracks the information for Primitives defined in the …\nPrinter for the IR.\nCan promote the group, control, or @go port of the …\ndenotes a static component or control promoted from dynamic\nIndicate that the cell should not be removed or shared …\nNames that are reserved in Calyx and Verilog.\nAlias for a RefCell contained in an Rc reference.\nData for the Dynamic <code>Repeat</code> control statement. Repeats the …\nStandard repeat control statement\nReset signal for the component\nData for the <code>seq</code> control statement.\nRepresents sequential composition of control statements.\nIs this component shareable\nIs the port connected to a state element\nIs the component state shareable\nStatic Control\nControl AST nodes.\nData for the <code>enable</code> control for a static group.\nA Group of assignments that perform a logical action.\nData for the <code>static if</code> control statement.\nData for a <code>StaticInvoke</code> control statement\nData for the <code>StaticRepeat</code> control statement. Essentially a …\nData for the <code>static seq</code> control statement.\nSynchronize this thread with others in the current par …\nThis cell represents the current component\nThis is the top-level component\nThe constant true\nUnknown attribute. Should not appear in the Calyx codebase.\nA Wrapper for a weak RefCell pointer. Used by parent …\nData for the <code>while</code> control statement.\nStandard imperative while statement\nRepresents an abstract width of a primitive signature.\nAdd a new element to the colleciton\nAdd a new attribute to the group.\nConstruct a combinational group\nAdd a component instance to this component using its name …\nReturn reference for a constant cell associated with the …\nAdd a new, non-inline primitive to the context. Panics if …\nConstruct a new FSM and add it to the Component. The FSM …\nConstruct a new group and add it to the Component. The …\nAdd a new inline primitive to the context. Panics if a …\nupdates self -&gt; self &amp; interval\nConsturcts a primitive cell of type <code>primitive</code>. The name of …\nSet the span information\nConstruct a new static group and add it to the Component. …\nReturns all the ports used by this guard.\nMutate the guard <code>g</code> of the assignment in-place to be …\nAdd all elements to the collection\nConvinience method to get string representation of …\nThe assignments used in this group\nThe assignments used in this group\nThe assignments used in this group\nState indexes into assignments that are supposed to be …\nAttributes for this component\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes\nAttributes\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes attached to this control statement.\nAttributes associated with this port.\nAttributes for this group.\nAttributes for this assignment.\nAttributes for this group.\nAttributes for this group.\nAttributes for this group.\nAttributes for this FSM\nKey-value attributes for this primitive.\nAttributes attached to this port definition\nConfiguration flags for backends.\nControl for the loop body.\nBody to repeat\nBody to repeat\nbody of the string, if it is an inlined primitive\nConstruct an assignment.\nBuild guarded assignment statements and return a vector …\nGet the canonical representation for this Port.\nReturns the parent of the Port which must be Cell. Throws …\nThe cells instantiated for this component.\nruns f(info) on each info in <code>guard</code>. f should return Result&lt;…\nRemoves all elements from the collection\nOptional combinational group that is active when the …\nOptional combinational group that is active when the …\nGroups of assignment wires.\nCell that is being invoked.\nCell that is being invoked.\nComponent for which this builder is constructing.\nThe components for this program.\nTake a static assignment guard and the latency of the …\nOptional combinational group attached using <code>with</code>.\nGroup that makes the signal on the conditional port valid.\nReturn the canonical name for the cell generated to …\nThe set of “continuous assignments”, i.e., assignments …\nThe control program for this component.\nConvinience method to get string representation of …\n<code>self</code> copys (i.e., assigns the same values) the attributes …\nDirection of the port\nThe direction of the port. Only allowed to be …\nReturns a reference to the assignment in the group that …\nReturns a mutable reference to the assignment in the group …\nRemoves all elements from the collection and returns an …\nThe destination for the assignment.\n[FIRRTL backend only] Emit extmodule declarations for …\nReturns an empty iterator over ports.\nConvience constructor for empty.\nConvience constructor for empty.\nConvience constructor for enable.\nEnables verification checks.\nReturn the entrypoint component.\nEntrypoint for the program\nReturn the entrypoint component with mutable access.\nExtend the FSM with new transitions and assignments. Will …\nExtend the assignments that are supposed to be active at a …\nReturn the paths for the extern defining files along with …\nExtra options provided to the command line. Interpreted by …\nControl for the false branch.\nControl for the false branch.\nReturns the element indicated by the name, if present, …\nGet a reference to the named port if it exists.\nGet a reference to the named hole if it exists.\nGet a reference to the named hole if it exists.\nGet a reference to the named hole if it exists.\nReturn all ports that have the attribute <code>attr</code>.\nReturn all ports that have the attribute <code>attr</code>.\nReturn a reference to the cell with <code>name</code> if present.\nReturn a refernece to a combination group with <code>name</code> if …\nReturn a reference to the fsm with <code>name</code> if present.\nReturn a reference to the group with <code>name</code> if present.\nReturn a reference to the cell with <code>name</code> if present.\nReturn the Primitive associated with the given name if …\nReturn a reference to the group with <code>name</code> if present.\nReturn the unique port with the given attribute. If …\nUse flat (ANF) assignments for guards instead of deep …\nMutates a guard by calling <code>f</code> on every leaf in the guard …\nApply function on all non-static assignments contained …\nruns f(info) on each Guard::Info in <code>guard</code>. if <code>f(info)</code> = …\nApply function <code>f</code> to each port contained within the …\nApply function <code>f</code> to each port contained within the …\nApply function to all assignments within static groups.\nFormat attributes of the form <code>@static(1)</code>. Returns the …\nFormat attributes of the form <code>&lt;&quot;static&quot;=1&gt;</code>. Returns the …\nFormats the top-level metadata if present\nFormats port definitions in signatures\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurns a normal guard into a static guard\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurns a static assignment into a normal assignment by …\nTurns a normal assignment into a static assignment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule to transform AST programs into IR.\nTry to create Self from the raw representation\nList of components to run.\nConvenience constructor for fsm enables.\nFSMs generated during compilation.\nConstruct a non-conflicting name using the Component’s …\nGet a reference to the named port and throw an error if it …\nGet a reference to the named hole or panic.\nGet a reference to the named hole or panic.\nGet the value associated with an attribute key\nReturns the value of an attribute if present\nReturns the value of an attribute if present\nReturns the value of an attribute if present\nReturns the value of an attribute if present\nReturn the value associated with this attribute key.\nReturns an <code>Attributes</code> instance\nThe attributes of this group.\nThe attributes of this group.\nThe attributes of this group.\nReturns a list of names of the groups, cells, or other …\nget the component’s fsms\ngets mutable access to the component’s fsms\ngets the component’s groups\ngets the component’s groups\nreturns the (u64, u64) interval for <code>struct</code>\nReturns the value of an attribute if present\nReturns a mutable <code>Attributes</code> instance\nReturn the name associated with this CellType if present\nGet parameter binding from the prototype used to build …\nGets name of parent object.\nReturn the Primitive associated to this Id.\ngets the component’s static groups\ngets the component’s groups\nGet the unique port with the given attribute. Panic if no …\nList of components to run.\nList of components to run.\nGroups of assignment wires.\nThe guard for this assignment.\nParse guard expression into <code>ir::Guard</code>.\nGenerate a String-based representation for a guard.\nCheck if an attribute key has been set\nReturns true if the node has a specific attribute\nReturns true if the node has a specific attribute\nHoles for this group\nHoles for this group\nConvience constructor for if\nGet the underlying number for this reference. Clients …\nMapping from name of input ports in <code>comp</code> to the port …\nMapping from name of input ports in <code>comp</code> to the port …\nAdd a new attribute\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvience constructor for invoke.\nTrue iff component is combinational\nTrue iff this is a combinational primitive\nReturns true iff this cell is an instance of a …\nChecks if this port is a constant of value: <code>val</code>.\nReturns true if there are no elements in the list.\nReturns true if there are no attributes\nChecks if the guard is always false. Returning false does …\nChecks if this port is a hole\nreturns true if the self is !cell_name, false otherwise.\nReturns true if this is an instance of a primitive. If the …\nGet a boolean describing whether the cell is external.\nCheck if this primitive is a source primitive\nCheck whether this is a static component. A static …\nCheck whether this component is purely structural, i.e. …\nReturns true iff this cell is the signature of the current …\nCheck whether this refers to a <code>FlatGuard::True</code>. (We can do …\nReturns true definitely <code>Guard::True</code>. Returning false does …\nIterate over <em>all</em> the guards in the pool.\nReturns an iterator over immutable references\nIterate over all non-static assignments contained within …\nReturns an iterator over mutable references. Likely a …\nIterate through all ports contained within the assignment.\nIterate over all static assignments contained within the …\n(Optional) latency of component, if it is static\nLatency, in cycles\nLatency, in cycles\nlatency field currrently, if two if branches take …\nlatency = num_repeats * (body latency)\nStaticLatency\nLatency of static group\n(Optional) latency; for static primitives\nLibrary definitions imported by the program.\nMarks an <code>import</code>ed extern block as a part of the source. …\nMark an inlined primitive as a part of the source. This is …\nEach element of the resulting Vec is a collection of …\nAn optional opaque metadata string\nReturn a reference to the object’s name\nGrants immutable access to the name of this cell.\nThe name of this group.\nThe name of this group.\nThe name of this group.\nGrants immutable access to the name of this cell.\nReturn the name of the port definition\nName of the component.\nName of the port\nName of this primitive.\nInstantiate a new builder using for a component.\nConstruct a new PortIterator from an iterator over ports.\nConstruct a new Component with the given <code>name</code> and ports.\ncreates a new <code>StaticTiming</code> struct\nConstruct a cell\nBuild a new unguarded assignment\nConstructs a new FSM construct using a list of cases and a …\nDisable the generated flag on the builder\nNumber of times to repeat the body\nNumber of times to repeat the body\nReturn the string corresponding to the guard operation.\nMapping from name of output ports in <code>comp</code> to the port …\nMapping from name of output ports in <code>comp</code> to the port …\nConvience constructor for par.\nConvience constructor for static enable.\nParamters for this primitive.\nWeak pointer to this port’s parent\nChecks if parent is combinational component\nChecks if the parent is an FSM. Assignments to these …\nChecks if parent is a protected cell\nPort that connects the conditional check.\nPort that connects the conditional check.\nPort that connects the conditional check.\nGet the port access expression.\nReturns a reference to all super::Port attached to this …\nPorts on this cell\nReturns all the underlying primitive information. If you …\nReturn the underyling inlined primitives and whether they …\nUnderlying type for this cell\nMapping from name of external cell in ‘comp’ to the …\nMapping from name of external cell in ‘comp’ to the …\nRemove attribute with the name <code>key</code>\nTake a static assignment guard and get rid of all static …\nConvience constructor for dynamic repeat\nConvience constructor for static if\nReplace every interval <code>[a1, a_n]</code> in a static timing guard …\nRetuns the bindings for all the paramters, the input ports …\nGiven a map from names of parameters to their values, …\nKeep only the elements in the collection which satisfy the …\nReturn the direction opposite to the current direction\nModules to rewrite the IR\nConstruct a new RRC.\nConvience constructor for seq.\nConvience constructor for static enable.\nSerializer methods for IR nodes.\ngets the component’s groups\noverwrites the current <code>interval</code> to be <code>new_interval</code>\nSet the external field\nMark this primitive as a source primitive\ngets the component’s groups\nThe input/output signature of this component.\nThe input/output signature for this primitive.\nReturn an iterator over all defined primitives.\nAn optional metadata mapping table\nThe source for the assignment.\nConvience constructor for enable.\nGroups of assignment wires\nConvience constructor for static if\nList of <code>Control</code> statements to run in sequence.\nList of <code>StaticControl</code> statements to run in sequence.\nList of <code>Control</code> statements to run in parallel.\nList of <code>StaticControl</code> statements to run in parallel.\nAdd primitives and constants to the component and <code>let</code>-bind …\nGenerate string representation of CellType appropriate for …\nEnables synthesis mode.\nReplaces &amp;mut self with an empty control statement, and …\nReplaces &amp;mut self with an empty control statement, and …\nReplaces &amp;mut self with an empty static control statement, …\nControl for the true branch.\nControl for the true branch.\nState indexes into (potentially guarded) next states\nResult variant of [ir::Builder::add_primitive()].\nReturns true if the widths, name, direction, and …\nReturns the name of the component that is this cells type.\nUpdate the guard in place. Replaces this guard with …\nConvinience method to upgrade and extract the underlying …\nHelpers used to examine calyx programs. Used in Xilinx and …\nEnable the validation flag on a builder.\nConvience constructor for while\nWidth of the port\nThe width of the port. .\nFormat and write an assignment.\nFormat and write a cell.\nFormat and write a combinational group.\nFormats and writes the Component to the formatter.\nPrints out the program context. If <code>skip_primitives</code> is …\nFormat and write a control program\nFormats and writes extern statements.\nFormat and write an FSM\nFormat and write a group.\nFormat and write a static control program\nFormat and write a static group.\nTrue iff this is a combinational primitive\n(Optional) latency of the primitive\nName of the primitive cell used to instantiate this cell.\nName of the component used to instantiate this cell.\nBindings for the parameters. Uses Vec to retain the input …\nValue of this constant\nWidth of this constant\nConstruct an IR representation using a parsed AST and …\nMap to rewrite port uses. Maps the canonical name of an …\nA rewrite map from ir::Id to [T].\nA structure to track rewrite maps for ports. Stores both …\nMapping from names of cells to cell instance.\nMapping from names of combinational groups to …\nReturns the argument unchanged.\nGet any port rewrite defined for the given port.\nReturn the rewrite for a cell\nMapping from names of groups to group instance.\nCalls <code>U::from(self)</code>.\nMapping from canonical names of ports to port instances\nRewrite the component using the given maps\nRewrite an assignment\nGiven a control program, rewrite all uses of cells, …\nRewrite assignments in a guard\nRewrite a <code>invoke</code> node using a RewriteMapir::Cell and a …\nGiven a control program, rewrite all uses of cells, …\nRewrite a <code>static invoke</code> node using a RewriteMapir::Cell …\nMapping from names of static groups to static group …\nContains the error value\nAn identifier representing a given file path\nA newtype wrapping a line number\nContains the success value\nAn identifier representing a location in the Calyx source …\nAdds a file to the file map with the given id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks up the source location of the position with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all file ids in the file map\nIterate over the stored file map, returning a tuple of …\nIterate over the paths of all files in the file map\nIterate over the stored position map, returning a tuple of …\nIterate over all position ids in the position map\nIterate over the source locations in the position map\nLooks up the path of the file with the given id.\nLooks up the source location of the position with the …\nCreates a new empty source info table\nAdds a file to the file map and generates a new file id …\nAdds a position to the position map and generates a new …\nParameters for std memories\nGets all memory cells in top level marked <code>@external</code> or <code>ref</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")