searchState.loadedDescShard("calyx_frontend", 0, "Frontend parsing and AST representation.\nDefines the known attributes that can be attached to IR …\nAttributes associated with a specific IR structure.\nAttributes that are only allowed to take boolean values.\nThe bound of a while loop\nClk for the signal\nsuggest that the current static seq block is compactable\nThe width is a constant.\nThis is a control path instance\nAttributes that have been deprecated.\nThis is a data path instance\nDirection of a port on a cell.\nAn extern block that defines multiple primitives\nCell should be externalized\nhttps://github.com/calyxir/calyx/issues/1828\nIR Node was generated by the compiler\nStructs that can return an <code>Attributes</code> instance.\nInline this subcomponent\nAn inline primitive\nInput-Output “port”. Should only be used by holes.\nInput port.\nInternal attributes that cannot be parsed back from the IL.\nPlaced on @go ports of components to denote the II of a …\nA representation of all the primitive definitions found …\nGenerate a new FSM for this control node\nThe component doesn’t have a standard interface\nAttributes that can take numeric values\nGenerate a one-hot FSM for this control node. (Not …\nOutput port.\nDenotes a group that was generated from a <code>staticpar</code> during …\nThe width is a parameter.\nDefinition of a port parameterized by a width type. Ports …\nSource location position for this node\nRepresentation of a external primitive definition.\nTracks the information for Primitives defined in the …\nCan promote the group, control, or @go port of the …\ndenotes a static component or control promoted from dynamic\nIndicate that the cell should not be removed or shared …\nReset signal for the component\nIs this component shareable\nIs the port connected to a state element\nIs the component state shareable\nSynchronize this thread with others in the current par …\nThis is the top-level component\nUnknown attribute. Should not appear in the Calyx codebase.\nRepresents an abstract width of a primitive signature.\nA Workspace represents all Calyx files transitively …\nAdd a new, non-inline primitive to the context. Panics if …\nAdd a new inline primitive to the context. Panics if a …\nSet the span information\nAbstract Syntax Tree for Calyx\nKey-value attributes for this primitive.\nAttributes attached to this port definition\nbody of the string, if it is an inlined primitive\nList of component definitions that need to be compiled.\nConstruct a new workspace from an input stream …\nConstruct the Workspace using the given NamespaceDef and …\nConstruct the Workspace using the given files and all …\n<code>self</code> copys (i.e., assigns the same values) the attributes …\nList of component definitions that should be used as …\nThe direction of the port. Only allowed to be …\nReturn the paths for the extern defining files along with …\nReturn all ports that have the attribute <code>attr</code>.\nReturn the Primitive associated with the given name if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new workspace using the <code>compile.futil</code> library …\nTry to create Self from the raw representation\nGet the value associated with an attribute key\nReturns an <code>Attributes</code> instance\nReturns a mutable <code>Attributes</code> instance\nReturn the Primitive associated to this Id.\nCheck if an attribute key has been set\nAdd a new attribute\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue iff this is a combinational primitive\nReturns true if there are no attributes\nCheck if this primitive is a source primitive\n(Optional) latency; for static primitives\nAbsolute path to extern definitions and primitives defined …\nMarks an <code>import</code>ed extern block as a part of the source. …\nMark an inlined primitive as a part of the source. This is …\nMerge the contents of a namespace into this workspace. …\nOptional opaque metadata attached to the top-level file.\nReturn the name of the port definition\nName of this primitive.\nOriginal import statements present in the top-level file.\nParamters for this primitive.\nParser for Calyx programs.\nReturns all the underlying primitive information. If you …\nReturn the underyling inlined primitives and whether they …\nRemove attribute with the name <code>key</code>\nRetuns the bindings for all the paramters, the input ports …\nGiven a map from names of parameters to their values, …\nReturn the direction opposite to the current direction\nMark this primitive as a source primitive\nThe input/output signature for this primitive.\nReturn an iterator over all defined primitives.\nOptional source info table attached to the top-level file\nThe width of the port. .\nAtomic operations used in guard conditions and RHS of the …\nCustom bitwidth numbers\nThe Cell AST nodes.\nRefers to the port named <code>port</code> on the subcomponent <code>component</code>…\nGuard Comparison Type\nAST statement for defining components.\nControl AST nodes. Since enables and static enables are …\nControl statement that does nothing.\nRuns the control for a list of subcomponents.\nGuards <code>expr</code> using the optional guard condition <code>guard</code>.\nPossible comparison operators for guards.\nThe AST for GuardExprs\n<code>group[name]</code> parses into <code>Hole { group, name }</code> and is a hole …\nStandard imperative if statement\nInvoke component with input/output assignments.\nCorresponds to an individual Calyx file.\nA constant.\nRepresents parallel composition of control statements.\nStatement that refers to a port on a subcomponent. This is …\nAccessing a particular port on a component.\nPrototype of the cell definition\nStatic Repeat (essentially a bounded while loop w/o a …\nRepresents sequential composition of control statements.\nGuards <code>expr</code> using the optional guard condition <code>guard</code>.\nThe AST for StaticGuardExprs\nStatic if statement.\nInvoke component with input/output assignments.\nRepresents parallel composition of static control …\nStatic Repeat (essentially a bounded while loop w/o a …\nRepresents sequential composition of static control …\nData for the <code>-&gt;</code> structure statement.\nRefers to the port named <code>port</code> on the component currently …\nStandard imperative while statement\nData for the <code>-&gt;</code> structure statement.\nAttributes attached to this component\nAttributes attached to this cell definition\nAttributes for this assignment\nAttributes for this assignment\nList of instantiated sub-components\nList of component definitions.\nConstruct a namespace from a file or the input stream. If …\nConstruct a namespace from a definition using a string.\nList of continuous assignments\nSingle control statement for this component.\nGuarded destinations of the wire.\nGuarded destinations of the wire.\nExtern statements and any primitive declarations in them.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a primitive cell instantiation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of groups\nPath to extern files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue iff this is a combinational component\n(Optional) latency of component, if it is static\nOptional opaque metadata.\nName of the component.\nName of the primitive.\nName of the cell.\nParameter binding for primitives\nName of the prototype this cell was built from.\nWhether this cell is external\nDefines input and output ports along with their attributes.\nOptional Source Info table\nSource of the wire.\nSource of the wire.\nList of StaticGroups\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nAttributes\nControl for the loop body.\nControl for the true branch.\nControl for the true branch.\nCombinational group that may execute with this invoke.\nCombinational group that may execute with this invoke.\nGroup to be enabled\nName of the component to be invoked.\nName of the component to be invoked.\nModules that need to be enabled to send signal on <code>port</code>.\nModules that need to be enabled to send signal on <code>port</code>.\nControl for the true branch.\nControl for the true branch.\nInput assignments\nInput assignments\n(optional) latency. Latency can be inferred if not given.\nOptional latency for the seq\nOptional latency for the par\nOptional latency; should be the longer of the two branches\nControl for the true branch.\nControl for the true branch.\nOutput assignments\nOutput assignments\nPort that connects the conditional check.\nPort that connects the conditional check.\nPort that connects the conditional check.\nExternal cells that may execute with this invoke.\nExternal cells that may execute with this invoke.\nList of <code>Control</code> statements to run in sequence.\nList of <code>Control</code> statements to run in sequence.\nList of <code>Control</code> statements to run in sequence. If not all …\nList of <code>Control</code> statements to run in sequence. If not all …\nControl for the true branch.\nControl for the true branch.\nEnd-of-input\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a Calyx program into an AST representation.\nContains the error value\nAn identifier representing a given file path\nA newtype wrapping a line number\nContains the success value\nAn identifier representing a location in the Calyx source …\nAdds a file to the file map with the given id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks up the source location of the position with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all file ids in the file map\nIterate over the stored file map, returning a tuple of …\nIterate over the paths of all files in the file map\nIterate over the stored position map, returning a tuple of …\nIterate over all position ids in the position map\nIterate over the source locations in the position map\nLooks up the path of the file with the given id.\nLooks up the source location of the position with the …\nCreates a new empty source info table\nAdds a file to the file map and generates a new file id …\nAdds a position to the position map and generates a new …")