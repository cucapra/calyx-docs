searchState.loadedDescShard("calyx_utils", 0, "Shared utilities for the Calyx compiler.\nEdge weight used for the graph nodes\nConvience wrapper to represent success or meaningul …\nContains the error value\nErrors generated by the compiler\nHandle to a file in a PositionTable The index refers to …\nA position index backed by a global PositionTable\nA trait representing something in the IR that has a name.\nThe global position table\nRepresents an identifier in a Calyx program\nIndex into a WeightGraph\nA collection of errors generated by the compiler\nSimple HashMap-based name generator that generates new …\nContains the success value\nPossible choices for output streams. Used by the <code>-o</code> option …\nHandle to a position in a PositionTable The index refers …\nA positioned string.\nSymbol for the unknown position\nWeight graph provides a wrapper over a Graph that allows …\nAn IR node that may contain position information.\nAdd edges between all given items.\nAdd an edge between <code>a</code> and <code>b</code>.\nAdd generated names\nAdd a new node to the graph. Client code should ensure …\nNumber of bits needed to represent a number.\nChecks if the node has already been added to the graph.\nCopy the span associated with this node.\nReturn the degree of a given node (number of edges …\nImplement parsing and generation for floating point …\nFormat this position with filename header and the error …\nFormat this position with the error message <code>err_msg</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new String that starts with <code>prefix</code>. For example:\nreturns:\nGraph representating using identifier.\nMapping from T to a unique identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the position into an optional. Returns <code>None</code> if the …\nReturn a reference to the object’s name\nConstruct a nw PosString from a String and a span.\nReturns an iterator over references to nodes in the Graph.\nReturns a Map from <code>NodeIndex</code> to <code>T</code> (the reverse of the …\nVisualizes the span without any message or marking\nCreate a NameGenerator where <code>names</code> are already defined so …\nAdd a span to an existing PosString.")